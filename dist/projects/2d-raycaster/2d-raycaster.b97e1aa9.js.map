{"mappings":"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","sources":["<anon>","src/main.ts","src/Level.ts","src/math/greedyRects.ts","src/math/Rect.ts","src/math/Vector2.ts","src/math/utils.ts","src/math/Line.ts","src/config.ts","src/inputs/Cursor.ts","src/inputs/Keyboard.ts","src/math/Visibility.ts","src/math/Polygon.ts","src/player/Player.ts","src/player/PlayerController.ts","src/rendering/LevelRenderer.ts","src/rendering/base/Renderer.ts","src/rendering/base/RendererCtx.ts"],"sourcesContent":["class $90c710c7d5aa6658$export$c79fc6492f3af13d {\n    constructor(position, size, userData){\n        this.position = position;\n        this.size = size;\n        this.userData = userData;\n    }\n}\n\n\nclass $b1c52281d4eed456$export$c977b3e384af9ae1 {\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n    equals(v) {\n        return this.x === v.x && this.y === v.y;\n    }\n    clone() {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(this.x, this.y);\n    }\n    min() {\n        return Math.min(this.x, this.y);\n    }\n    max() {\n        return Math.max(this.x, this.y);\n    }\n    fn(fn) {\n        this.x = fn(this.x);\n        this.y = fn(this.y);\n        return this;\n    }\n    static fromAngle(angle) {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(Math.cos(angle), Math.sin(angle));\n    }\n    magnitude() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n    length() {\n        return this.magnitude();\n    }\n    dot(v) {\n        return this.x * v.x + this.y * v.y;\n    }\n    static normalize(a) {\n        const length = a.magnitude();\n        if (length === 0) return new $b1c52281d4eed456$export$c977b3e384af9ae1(0, 0);\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(a.x / length, a.y / length);\n    }\n    normalize() {\n        const length = this.magnitude();\n        if (length === 0) {\n            this.x = 0;\n            this.y = 0;\n            return this;\n        }\n        this.x /= length;\n        this.y /= length;\n        return this;\n    }\n    static add(a, b) {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(a.x + b.x, a.y + b.y);\n    }\n    static addScalar(a, s) {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(a.x + s, a.y + s);\n    }\n    add(v) {\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n    }\n    addScalar(s) {\n        this.x += s;\n        this.y += s;\n        return this;\n    }\n    static sub(a, b) {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(a.x - b.x, a.y - b.y);\n    }\n    static subScalar(a, s) {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(a.x - s, a.y - s);\n    }\n    sub(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n    }\n    subScalar(s) {\n        this.x -= s;\n        this.y -= s;\n        return this;\n    }\n    static mul(a, b) {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(a.x * b.x, a.y * b.y);\n    }\n    static mulScalar(a, s) {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(a.x * s, a.y * s);\n    }\n    mul(v) {\n        this.x *= v.x;\n        this.y *= v.y;\n        return this;\n    }\n    mulScalar(s) {\n        this.x *= s;\n        this.y *= s;\n        return this;\n    }\n    static div(a, b) {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(a.x / b.x, a.y / b.y);\n    }\n    static divScalar(a, s) {\n        return new $b1c52281d4eed456$export$c977b3e384af9ae1(a.x / s, a.y / s);\n    }\n    div(v) {\n        this.x /= v.x;\n        this.y /= v.y;\n        return this;\n    }\n    divScalar(s) {\n        this.x /= s;\n        this.y /= s;\n        return this;\n    }\n}\n\n\nclass $5ff6a2ea679a026f$var$MaxHeap {\n    constructor(comparator){\n        this.data = [];\n        this.comparator = comparator;\n    }\n    push(item) {\n        this.data.push(item);\n        for(let index = this.data.length - 1; index > 0;){\n            const parentIndex = index - 1 >>> 1;\n            if (this.comparator(this.data[index], this.data[parentIndex]) <= 0) break;\n            [this.data[parentIndex], this.data[index]] = [\n                this.data[index],\n                this.data[parentIndex]\n            ];\n            index = parentIndex;\n        }\n    }\n    pop() {\n        const length = this.data.length;\n        if (length === 0) return null;\n        const top = this.data[0];\n        const last = this.data.pop();\n        if (this.data.length > 0) {\n            this.data[0] = last;\n            for(let index = 0;;){\n                const left = (index << 1) + 1;\n                const right = left + 1;\n                let largest = index;\n                if (left < this.data.length && this.comparator(this.data[left], this.data[largest]) > 0) largest = left;\n                if (right < this.data.length && this.comparator(this.data[right], this.data[largest]) > 0) largest = right;\n                if (largest === index) break;\n                [this.data[index], this.data[largest]] = [\n                    this.data[largest],\n                    this.data[index]\n                ];\n                index = largest;\n            }\n        }\n        return top;\n    }\n    get size() {\n        return this.data.length;\n    }\n}\nfunction $5ff6a2ea679a026f$var$compareArea(a, b) {\n    return a.size.x * a.size.y - b.size.x * b.size.y;\n}\nfunction $5ff6a2ea679a026f$var$genericKey(...components) {\n    return components.join(',');\n}\nfunction $5ff6a2ea679a026f$var$rectKey(rect) {\n    return $5ff6a2ea679a026f$var$genericKey(rect.position.x, rect.position.y, rect.size.x, rect.size.y);\n}\nfunction $5ff6a2ea679a026f$var$buildInitialRectangles(matrix, heap, seen) {\n    const rowCount = matrix.length;\n    const colCount = matrix[0].length;\n    const runLength = new Array(rowCount).fill(0);\n    for(let col = colCount - 1; col >= 0; col--){\n        for(let row = 0; row < rowCount; row++)runLength[row] = matrix[row][col] ? runLength[row] + 1 : 0;\n        const stackItems = [];\n        let currentMaxWidth = 0;\n        for(let row = 0; row <= rowCount; row++){\n            const widthAtRow = row < rowCount ? runLength[row] : 0;\n            if (widthAtRow > currentMaxWidth) {\n                stackItems.push({\n                    startRow: row,\n                    prevWidth: currentMaxWidth\n                });\n                currentMaxWidth = widthAtRow;\n            } else if (widthAtRow < currentMaxWidth) {\n                while(stackItems.length > 0 && widthAtRow < currentMaxWidth){\n                    const { startRow: startRow, prevWidth: prevWidth } = stackItems.pop();\n                    const height = row - startRow;\n                    const w = currentMaxWidth;\n                    const rect = new (0, $90c710c7d5aa6658$export$c79fc6492f3af13d)(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(col, startRow), new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(w, height));\n                    const key = $5ff6a2ea679a026f$var$genericKey(col, startRow, w, height);\n                    if (!seen.has(key)) {\n                        seen.add(key);\n                        heap.push(rect);\n                    }\n                    currentMaxWidth = prevWidth;\n                }\n                if (widthAtRow > currentMaxWidth) {\n                    stackItems.push({\n                        startRow: row,\n                        prevWidth: currentMaxWidth\n                    });\n                    currentMaxWidth = widthAtRow;\n                }\n            }\n        }\n    }\n}\nfunction $5ff6a2ea679a026f$var$isEdgesClear(rect, usedMask, colCount) {\n    const x0 = rect.position.x;\n    const y0 = rect.position.y;\n    const width = rect.size.x;\n    const height = rect.size.y;\n    for(let dx = 0; dx < width; dx++){\n        const topIndex = y0 * colCount + x0 + dx;\n        const bottomIndex = (y0 + height - 1) * colCount + x0 + dx;\n        if (usedMask[topIndex] === 1 || usedMask[bottomIndex] === 1) return false;\n    }\n    for(let dy = 0; dy < height; dy++){\n        const leftIndex = (y0 + dy) * colCount + x0;\n        const rightIndex = (y0 + dy) * colCount + x0 + width - 1;\n        if (usedMask[leftIndex] === 1 || usedMask[rightIndex] === 1) return false;\n    }\n    return true;\n}\nfunction $5ff6a2ea679a026f$var$markRectangle(rect, usedMask, colCount) {\n    const x0 = rect.position.x;\n    const y0 = rect.position.y;\n    const width = rect.size.x;\n    const height = rect.size.y;\n    for(let dy = 0; dy < height; dy++){\n        let baseIndex = (y0 + dy) * colCount + x0;\n        for(let dx = 0; dx < width; dx++)usedMask[baseIndex + dx] = 1;\n    }\n}\nfunction $5ff6a2ea679a026f$var$spawnChildren(rect, heap, seen) {\n    const width = rect.size.x;\n    const height = rect.size.y;\n    if (width > 1) {\n        const childW = new (0, $90c710c7d5aa6658$export$c79fc6492f3af13d)(rect.position.clone(), new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(width - 1, height));\n        const keyW = $5ff6a2ea679a026f$var$rectKey(childW);\n        if (!seen.has(keyW)) {\n            seen.add(keyW);\n            heap.push(childW);\n        }\n    }\n    if (height > 1) {\n        const childH = new (0, $90c710c7d5aa6658$export$c79fc6492f3af13d)(rect.position.clone(), new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(width, height - 1));\n        const keyH = $5ff6a2ea679a026f$var$rectKey(childH);\n        if (!seen.has(keyH)) {\n            seen.add(keyH);\n            heap.push(childH);\n        }\n    }\n}\nfunction $5ff6a2ea679a026f$export$9dbb9ab133a8ba5c(matrix) {\n    const rowCount = matrix.length;\n    if (rowCount === 0) return [];\n    const colCount = matrix[0].length;\n    const usedMask = new Uint8Array(rowCount * colCount);\n    const heap = new $5ff6a2ea679a026f$var$MaxHeap($5ff6a2ea679a026f$var$compareArea);\n    const seen = new Set();\n    $5ff6a2ea679a026f$var$buildInitialRectangles(matrix, heap, seen);\n    const result = [];\n    while(heap.size > 0){\n        const rect = heap.pop();\n        if (!rect) break;\n        const key = $5ff6a2ea679a026f$var$rectKey(rect);\n        if (!seen.has(key)) continue;\n        seen.delete(key);\n        if ($5ff6a2ea679a026f$var$isEdgesClear(rect, usedMask, colCount)) {\n            $5ff6a2ea679a026f$var$markRectangle(rect, usedMask, colCount);\n            result.push(rect);\n        } else $5ff6a2ea679a026f$var$spawnChildren(rect, heap, seen);\n    }\n    return result;\n}\n\n\nclass $a3b594b1af91c51e$export$17d680238e50603e {\n    constructor(p1, p2, userData){\n        this.p1 = p1;\n        this.p2 = p2;\n        this.userData = userData;\n    }\n}\n\n\n\nconst $d78f250177f3f870$export$b1b275608b2b1b8 = (deg)=>deg * Math.PI / 180;\nconst $d78f250177f3f870$export$5082664ed3e64ee8 = (a, b)=>Math.hypot(b.x - a.x, b.y - a.y);\nconst $d78f250177f3f870$export$47cb7eb79666608a = (a, b)=>Math.atan2(b.y - a.y, b.x - a.x);\nconst $d78f250177f3f870$export$3a89f8d6f6bf6c9f = (a, b, t)=>a + (b - a) * t;\nconst $d78f250177f3f870$export$7d15b64cf5a3a4c4 = (value, min, max)=>Math.max(min, Math.min(max, value));\nfunction $d78f250177f3f870$export$e3df76cf4464bc81(theta) {\n    theta = (theta + Math.PI) % (2 * Math.PI);\n    return theta < 0 ? theta + Math.PI : theta - Math.PI;\n}\nfunction $d78f250177f3f870$export$f9d463325d36ce37(l1, l2) {\n    const { p1: { x: x1, y: y1 }, p2: { x: x2, y: y2 } } = l1;\n    const { p1: { x: x3, y: y3 }, p2: { x: x4, y: y4 } } = l2;\n    const dx1 = x2 - x1, dy1 = y2 - y1;\n    const dx2 = x4 - x3, dy2 = y4 - y3;\n    const denom = dy2 * dx1 - dx2 * dy1;\n    if (!denom) return null;\n    const dx13 = x1 - x3;\n    const dy13 = y1 - y3;\n    const ua = (dx2 * dy13 - dy2 * dx13) / denom;\n    const ub = (dx1 * dy13 - dy1 * dx13) / denom;\n    const position = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(x1 + ua * dx1, y1 + ua * dy1);\n    const cross = ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1;\n    return {\n        position: position,\n        cross: cross\n    };\n}\nfunction $d78f250177f3f870$export$21bdf2710da1b0d7(r1, r2) {\n    const { position: p1, size: s1 } = r1;\n    const { position: p2, size: s2 } = r2;\n    return p1.x - s1.x / 2 < p2.x + s2.x / 2 && p1.x + s1.x / 2 > p2.x - s2.x / 2 && p1.y - s1.y / 2 < p2.y + s2.y / 2 && p1.y + s1.y / 2 > p2.y - s2.y / 2;\n}\nfunction $d78f250177f3f870$export$51be7442bbfe168a(ray, lines) {\n    let closestIntersection = null, closestDistance = Infinity;\n    for (const line of lines){\n        const intersection = $d78f250177f3f870$export$f9d463325d36ce37(ray, line);\n        if (intersection?.cross) {\n            const distance = $d78f250177f3f870$export$5082664ed3e64ee8(ray.p1, intersection.position);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestIntersection = intersection;\n            }\n        }\n    }\n    return closestIntersection?.position ?? null;\n}\nfunction $d78f250177f3f870$export$ee6b921fdc6f9dbe(point, rect) {\n    const { position: position, size: size } = rect;\n    const halfSize = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).divScalar(size, 2);\n    return point.x >= position.x - halfSize.x && point.x <= position.x + halfSize.x && point.y >= position.y - halfSize.y && point.y <= position.y + halfSize.y;\n}\nfunction $d78f250177f3f870$export$6295e450519f928d(rect) {\n    const { position: position, size: size } = rect;\n    const halfSize = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).divScalar(size, 2);\n    return [\n        (0, $b1c52281d4eed456$export$c977b3e384af9ae1).add(position, new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(-1, -1).mul(halfSize)),\n        (0, $b1c52281d4eed456$export$c977b3e384af9ae1).add(position, new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(1, -1).mul(halfSize)),\n        (0, $b1c52281d4eed456$export$c977b3e384af9ae1).add(position, new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(1, 1).mul(halfSize)),\n        (0, $b1c52281d4eed456$export$c977b3e384af9ae1).add(position, new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(-1, 1).mul(halfSize))\n    ];\n}\nfunction $d78f250177f3f870$export$961147ea8c83e176(rect) {\n    const points = $d78f250177f3f870$export$6295e450519f928d(rect);\n    return [\n        new (0, $a3b594b1af91c51e$export$17d680238e50603e)(points[0], points[1]),\n        new (0, $a3b594b1af91c51e$export$17d680238e50603e)(points[1], points[2]),\n        new (0, $a3b594b1af91c51e$export$17d680238e50603e)(points[2], points[3]),\n        new (0, $a3b594b1af91c51e$export$17d680238e50603e)(points[3], points[0])\n    ];\n}\nfunction $d78f250177f3f870$export$fce123c48a7b4eae(width, height, fill) {\n    const grid = new Array(height);\n    for(let i = 0; i < height; i++)grid[i] = new Array(width).fill(0);\n    if (!fill) return grid;\n    for(let y = 0; y < height; y++)for(let x = 0; x < width; x++)grid[y][x] = fill(x, y);\n    return grid;\n}\n\n\n\nclass $36888477c1b74358$export$f6f0c3fe4ec306ea {\n    constructor(char, position, userData){\n        this.char = char;\n        this.position = position;\n        this.userData = userData;\n    }\n}\nclass $36888477c1b74358$export$ca664994d1d54bff {\n    static fromString(levelString) {\n        const rows = levelString.trim().split('\\n');\n        const width = rows[0].length;\n        const height = rows.length;\n        const level = new $36888477c1b74358$export$ca664994d1d54bff(width, height);\n        for(let y = 0; y < height; y++){\n            const row = rows[y];\n            for(let x = 0; x < width; x++){\n                const char = row[x];\n                const poisition = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(x, y);\n                const cell = new $36888477c1b74358$export$f6f0c3fe4ec306ea(char, poisition);\n                level.set(x, y, cell);\n            }\n        }\n        level.bake();\n        return level;\n    }\n    constructor(width, height){\n        this.rects = [];\n        this.lines = [];\n        this.points = [];\n        this.size = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(width, height);\n        this.cells = (0, $d78f250177f3f870$export$fce123c48a7b4eae)(width, height);\n    }\n    bake() {\n        const grid = (0, $d78f250177f3f870$export$fce123c48a7b4eae)(this.size.x, this.size.y, (x, y)=>{\n            const cell = this.get(x, y);\n            return cell.char === '#' ? 1 : 0;\n        });\n        const rects = (0, $5ff6a2ea679a026f$export$9dbb9ab133a8ba5c)(grid);\n        rects.forEach((rect)=>{\n            rect.position.add((0, $b1c52281d4eed456$export$c977b3e384af9ae1).divScalar(rect.size, 2)).subScalar(0.5);\n            const points = (0, $d78f250177f3f870$export$6295e450519f928d)(rect);\n            const lines = (0, $d78f250177f3f870$export$961147ea8c83e176)(rect);\n            this.points.push(...points);\n            this.lines.push(...lines);\n            this.rects.push(rect);\n        });\n    }\n    forEach(callback, ignoreEmpty = true) {\n        let result;\n        for(let y = 0; y < this.size.y; y++){\n            const row = this.cells[y];\n            for(let x = 0; x < this.size.x; x++){\n                const cell = row[x];\n                if (ignoreEmpty && cell.char === ' ') continue;\n                const stop = ()=>result = cell;\n                callback(cell, stop);\n                if (result) return result;\n            }\n        }\n        return null;\n    }\n    find(character) {\n        return this.forEach((cell, stop)=>{\n            if (cell.char === character) stop();\n        });\n    }\n    set(x, y, cell) {\n        this.cells[y][x] = cell;\n    }\n    get(x, y) {\n        return this.cells[y][x];\n    }\n}\n\n\nconst $9d936a2aecb96285$export$3c2d24a8ea6992f9 = `\n############\n#    #     #\n#    #@    #\n#    #     #\n#    ##### #\n#          #\n#          #\n#          #\n#          #\n#          #\n# # # # # ##\n############\n`;\nconst $9d936a2aecb96285$export$8f45430ccf837300 = {\n    characters: {\n        ' ': '#000000',\n        '#': '#ffffff',\n        '@': '#80e020'\n    },\n    player: '#0ed180',\n    rays: '#ffff00'\n};\n\n\n\nclass $361c27d9ec34e012$export$b6a79797ad180576 {\n    constructor(){\n        this.position = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0);\n        this.isDown = false;\n        this.ctrl = new AbortController();\n        this.setupEvents();\n    }\n    setupEvents() {\n        const { signal: signal } = this.ctrl;\n        document.addEventListener('mousemove', (event)=>{\n            this.position = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(event.clientX, event.clientY);\n            this.onMouseMove(event);\n        }, {\n            signal: signal\n        });\n        document.addEventListener('mousedown', (event)=>{\n            this.isDown = true;\n            this.onMouseDown(event);\n        }, {\n            signal: signal\n        });\n        document.addEventListener('mouseup', (event)=>{\n            this.isDown = false;\n            this.onMouseUp(event);\n        }, {\n            signal: signal\n        });\n        document.addEventListener('click', (event)=>{\n            this.onMouseClick(event);\n        }, {\n            signal: signal\n        });\n        document.addEventListener('wheel', (event)=>{\n            this.onMouseWheel(event);\n        }, {\n            signal: signal\n        });\n    }\n    onMouseMove(event) {}\n    onMouseDown(event) {}\n    onMouseUp(event) {}\n    onMouseClick(event) {}\n    onMouseWheel(event) {}\n    destroy() {\n        this.ctrl.abort();\n    }\n}\n\n\nclass $bc480dbcff87c0d9$export$16e4d70cc375e707 {\n    constructor(options){\n        this.pressedKeys = new Set();\n        this.ctrl = new AbortController();\n        this.ignoreCase = options?.ignoreCase ?? true;\n        this.setupEvents();\n    }\n    getKey(key) {\n        return this.ignoreCase ? key.toUpperCase() : key;\n    }\n    isKeyDown(key) {\n        return this.pressedKeys.has(this.getKey(key));\n    }\n    setupEvents() {\n        const { signal: signal } = this.ctrl;\n        document.addEventListener('keydown', (event)=>{\n            this.pressedKeys.add(this.getKey(event.key));\n            this.onKeyDown(event);\n        }, {\n            signal: signal\n        });\n        document.addEventListener('keyup', (event)=>{\n            this.pressedKeys.delete(this.getKey(event.key));\n            this.onKeyUp(event);\n        }, {\n            signal: signal\n        });\n    }\n    onKeyDown(event) {}\n    onKeyUp(event) {}\n    destroy() {\n        this.ctrl.abort();\n    }\n}\n\n\n\nclass $3507c17b1074d59c$export$7d31b617c820d435 {\n    constructor(points){\n        this.points = points;\n    }\n}\n\n\n\n\nclass $56210ab632d05b2f$var$EndPoint extends (0, $b1c52281d4eed456$export$c977b3e384af9ae1) {\n    constructor(x = 0, y = 0, userData){\n        super(x, y), this.begin = false, this.angle = 0, this.segment = null, this.visualize = false;\n        this.userData = userData;\n    }\n}\nclass $56210ab632d05b2f$var$Segment {\n    constructor(){\n        this.distanceSquared = 0;\n    }\n}\nclass $56210ab632d05b2f$export$5afe92775e3e701d {\n    constructor(player){\n        this.segments = [];\n        this.endpoints = [];\n        this.openSegments = [];\n        this.center = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0);\n        this.output = [];\n        this.outputPolygon = new (0, $3507c17b1074d59c$export$7d31b617c820d435)([]);\n        this.intersectionsDetected = [];\n        this.player = player;\n    }\n    update() {\n        this.setLightLocation(this.player.position);\n        this.sweep();\n    }\n    loadMap(rects) {\n        this.segments = [];\n        this.endpoints = [];\n        for (const rect of rects)for (const edge of (0, $d78f250177f3f870$export$961147ea8c83e176)(rect))this.addSegment(edge);\n    }\n    addSegment(...lines) {\n        for (const line of lines){\n            const segment = new $56210ab632d05b2f$var$Segment();\n            const end1 = new $56210ab632d05b2f$var$EndPoint(line.p1.x, line.p1.y);\n            const end2 = new $56210ab632d05b2f$var$EndPoint(line.p2.x, line.p2.y);\n            end1.segment = segment;\n            end1.visualize = true;\n            end2.segment = segment;\n            end2.visualize = false;\n            segment.p1 = end1;\n            segment.p2 = end2;\n            segment.userData = line.userData;\n            end1.userData = line.userData;\n            end2.userData = line.userData;\n            this.segments.push(segment);\n            this.endpoints.push(end1, end2);\n        }\n    }\n    setBounds(position, size) {\n        const userData = {\n            isBound: true\n        };\n        this.segments = this.segments.filter((s)=>!s.userData?.isBound);\n        this.endpoints = this.endpoints.filter((e)=>!e.userData?.isBound);\n        this.addSegment(new (0, $a3b594b1af91c51e$export$17d680238e50603e)(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(position.x, position.y), new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(position.x, position.y + size.y), userData), new (0, $a3b594b1af91c51e$export$17d680238e50603e)(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(position.x, position.y), new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(position.x + size.x, position.y), userData), new (0, $a3b594b1af91c51e$export$17d680238e50603e)(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(position.x + size.x, position.y), new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(position.x + size.x, position.y + size.y), userData), new (0, $a3b594b1af91c51e$export$17d680238e50603e)(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(position.x, position.y + size.y), new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(position.x + size.x, position.y + size.y), userData));\n    }\n    setLightLocation(position) {\n        this.center.set(position.x, position.y);\n        for (const segment of this.segments){\n            const midX = 0.5 * (segment.p1.x + segment.p2.x);\n            const midY = 0.5 * (segment.p1.y + segment.p2.y);\n            const dx = midX - position.x;\n            const dy = midY - position.y;\n            segment.distanceSquared = dx * dx + dy * dy;\n            segment.p1.angle = Math.atan2(segment.p1.y - position.y, segment.p1.x - position.x);\n            segment.p2.angle = Math.atan2(segment.p2.y - position.y, segment.p2.x - position.x);\n            let deltaAngle = segment.p2.angle - segment.p1.angle;\n            if (deltaAngle <= -Math.PI) deltaAngle += 2 * Math.PI;\n            if (deltaAngle > Math.PI) deltaAngle -= 2 * Math.PI;\n            segment.p1.begin = deltaAngle > 0;\n            segment.p2.begin = !segment.p1.begin;\n        }\n    }\n    sweep(maxAngle = Number.POSITIVE_INFINITY) {\n        this.output = [];\n        this.intersectionsDetected = [];\n        this.endpoints.sort($56210ab632d05b2f$export$5afe92775e3e701d.compareEndpoints);\n        this.openSegments = [];\n        let startAngle = 0;\n        for(let pass = 0; pass < 2; pass++)for (const point of this.endpoints){\n            if (pass === 1 && point.angle > maxAngle) break;\n            const previous = this.openSegments[0] || null;\n            if (point.begin) {\n                const seg = point.segment;\n                const insertAt = this.openSegments.findIndex((other)=>!this.segmentInFrontOf(seg, other, this.center));\n                if (insertAt === -1) this.openSegments.push(seg);\n                else this.openSegments.splice(insertAt, 0, seg);\n            } else {\n                const index = this.openSegments.indexOf(point.segment);\n                if (index >= 0) this.openSegments.splice(index, 1);\n            }\n            const current = this.openSegments[0] || null;\n            if (previous !== current) {\n                if (pass === 1) this.emitTriangle(startAngle, point.angle, previous);\n                startAngle = point.angle;\n            }\n        }\n        this.outputPolygon = new (0, $3507c17b1074d59c$export$7d31b617c820d435)(this.output);\n    }\n    getClippedPolygon(fovRays) {\n        const fullFan = this.output;\n        const hits = [];\n        for(let rayIdx = 0; rayIdx < 2; rayIdx++){\n            const ray = fovRays[rayIdx];\n            for(let i = 0; i < fullFan.length; i++){\n                const A = fullFan[i];\n                const B = fullFan[(i + 1) % fullFan.length];\n                const inter = (0, $d78f250177f3f870$export$f9d463325d36ce37)(ray, new (0, $a3b594b1af91c51e$export$17d680238e50603e)(A, B));\n                if (inter?.cross) {\n                    hits.push({\n                        index: i,\n                        point: inter.position.clone(),\n                        ray: rayIdx\n                    });\n                    break;\n                }\n            }\n        }\n        const leftHit = hits.find((h)=>h.ray === 0);\n        const rightHit = hits.find((h)=>h.ray === 1);\n        let wedge;\n        if (!leftHit || !rightHit) wedge = [];\n        else if (leftHit.index === rightHit.index) wedge = [\n            leftHit.point,\n            rightHit.point\n        ];\n        else {\n            let middle;\n            if (leftHit.index < rightHit.index) middle = fullFan.slice(leftHit.index + 1, rightHit.index + 1).map((p)=>p.clone());\n            else middle = [\n                ...fullFan.slice(leftHit.index + 1).map((p)=>p.clone()),\n                ...fullFan.slice(0, rightHit.index + 1).map((p)=>p.clone())\n            ];\n            wedge = [\n                leftHit.point,\n                ...middle,\n                rightHit.point\n            ];\n        }\n        wedge.unshift(this.center.clone());\n        return new (0, $3507c17b1074d59c$export$7d31b617c820d435)(wedge);\n    }\n    emitTriangle(startAngle, endAngle, seg) {\n        const origin = this.center.clone();\n        const dir1 = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(origin.x + Math.cos(startAngle), origin.y + Math.sin(startAngle));\n        let edgeA, edgeB;\n        if (seg) {\n            edgeA = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(seg.p1.x, seg.p1.y);\n            edgeB = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(seg.p2.x, seg.p2.y);\n        } else {\n            const far1 = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).fromAngle(startAngle).mulScalar(10000);\n            const far2 = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).fromAngle(endAngle).mulScalar(10000);\n            edgeA = origin.clone().add(far1);\n            edgeB = origin.clone().add(far2);\n        }\n        const hit1 = $56210ab632d05b2f$export$5afe92775e3e701d.lineIntersection(edgeA, edgeB, origin, dir1);\n        const dir2 = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(this.center.x + Math.cos(endAngle), this.center.y + Math.sin(endAngle));\n        const hit2 = $56210ab632d05b2f$export$5afe92775e3e701d.lineIntersection(edgeA, edgeB, origin, dir2);\n        this.output.push(hit1, hit2);\n    }\n    segmentInFrontOf(a, b, observer) {\n        const epsilon = 0.01;\n        const A1 = $56210ab632d05b2f$export$5afe92775e3e701d.leftOf(a, $56210ab632d05b2f$export$5afe92775e3e701d.interpolate(b.p1, b.p2, epsilon));\n        const A2 = $56210ab632d05b2f$export$5afe92775e3e701d.leftOf(a, $56210ab632d05b2f$export$5afe92775e3e701d.interpolate(b.p2, b.p1, epsilon));\n        const A3 = $56210ab632d05b2f$export$5afe92775e3e701d.leftOf(a, observer);\n        const B1 = $56210ab632d05b2f$export$5afe92775e3e701d.leftOf(b, $56210ab632d05b2f$export$5afe92775e3e701d.interpolate(a.p1, a.p2, epsilon));\n        const B2 = $56210ab632d05b2f$export$5afe92775e3e701d.leftOf(b, $56210ab632d05b2f$export$5afe92775e3e701d.interpolate(a.p2, a.p1, epsilon));\n        const B3 = $56210ab632d05b2f$export$5afe92775e3e701d.leftOf(b, observer);\n        if (B1 === B2 && B2 !== B3) return true;\n        if (A1 === A2 && A2 === A3) return true;\n        if (A1 === A2 && A2 !== A3) return false;\n        if (B1 === B2 && B2 === B3) return false;\n        this.intersectionsDetected.push([\n            a.p1,\n            a.p2,\n            b.p1,\n            b.p2\n        ]);\n        return false;\n    }\n    static compareEndpoints(a, b) {\n        if (a.angle > b.angle) return 1;\n        if (a.angle < b.angle) return -1;\n        if (!a.begin && b.begin) return 1;\n        if (a.begin && !b.begin) return -1;\n        return 0;\n    }\n    static leftOf(s, p) {\n        const crossValue = (s.p2.x - s.p1.x) * (p.y - s.p1.y) - (s.p2.y - s.p1.y) * (p.x - s.p1.x);\n        return crossValue < 0;\n    }\n    static interpolate(p, q, f) {\n        return new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(p.x * (1 - f) + q.x * f, p.y * (1 - f) + q.y * f);\n    }\n    static lineIntersection(line1Start, line1End, line2Start, line2End) {\n        const intersectionFraction = ((line2End.x - line2Start.x) * (line1Start.y - line2Start.y) - (line2End.y - line2Start.y) * (line1Start.x - line2Start.x)) / ((line2End.y - line2Start.y) * (line1End.x - line1Start.x) - (line2End.x - line2Start.x) * (line1End.y - line1Start.y));\n        return new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(line1Start.x + intersectionFraction * (line1End.x - line1Start.x), line1Start.y + intersectionFraction * (line1End.y - line1Start.y));\n    }\n}\n\n\n\n\nclass $da2fd7912630ee09$export$2616165974278734 {\n    constructor(position){\n        this.position = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0);\n        this.velocity = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0);\n        this.speed = 0.0075;\n        this.friction = 0.875;\n        this.angle = 0;\n        this.angleVelocity = 0;\n        this.cameraSpeed = 0.0075;\n        this.cameraFriction = 0.875;\n        this.fovDegrees = 65;\n        this.fov = (0, $d78f250177f3f870$export$b1b275608b2b1b8)(this.fovDegrees);\n        this.position = position;\n    }\n    lookAt(position) {\n        this.angle = (0, $d78f250177f3f870$export$47cb7eb79666608a)(this.position, position);\n    }\n}\n\n\n\n\n\nclass $d4c9f062fc6eae44$export$cbacd6dcfff5ae2e {\n    constructor(player, keyboard, cursor, levelRenderer){\n        this.disableMouseCamera = true;\n        this.player = player;\n        this.keyboard = keyboard;\n        this.cursor = cursor;\n        this.levelRenderer = levelRenderer;\n        this.level = levelRenderer.level;\n        this.cursor.onMouseMove = ()=>this.onCursorMove();\n        this.cursor.onMouseWheel = (event)=>this.onMouseWheel(event);\n    }\n    update() {\n        // this.useSimpleController();\n        this.useComplexController();\n    }\n    useSimpleController() {\n        const { player: player, keyboard: keyboard } = this;\n        const movement = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0);\n        if (keyboard.isKeyDown('W')) movement.y -= 1;\n        if (keyboard.isKeyDown('S')) movement.y += 1;\n        if (keyboard.isKeyDown('A')) movement.x -= 1;\n        if (keyboard.isKeyDown('D')) movement.x += 1;\n        movement.normalize().mulScalar(player.speed);\n        player.velocity.add(movement);\n        player.position.add(player.velocity);\n        player.velocity.mulScalar(player.friction);\n        this.onCursorMove();\n        this.handleCollisions();\n    }\n    useComplexController() {\n        const { player: player, keyboard: keyboard } = this;\n        const movement = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0);\n        const forward = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).fromAngle(player.angle);\n        if (keyboard.isKeyDown('W')) movement.add(forward);\n        if (keyboard.isKeyDown('S')) movement.add((0, $b1c52281d4eed456$export$c977b3e384af9ae1).mulScalar(forward, -1));\n        if (keyboard.isKeyDown('A')) player.angleVelocity -= player.cameraSpeed;\n        if (keyboard.isKeyDown('D')) player.angleVelocity += player.cameraSpeed;\n        if (movement.x !== 0 || movement.y !== 0) {\n            movement.normalize().mulScalar(player.speed);\n            player.velocity.add(movement);\n        }\n        player.position.add(player.velocity);\n        player.velocity.mulScalar(player.friction);\n        player.angle += player.angleVelocity;\n        player.angleVelocity *= player.cameraFriction;\n        this.handleCollisions();\n    }\n    handleCollisions() {\n        const { player: player, level: level } = this;\n        const playerSize = 0.65;\n        const playerRect = new (0, $90c710c7d5aa6658$export$c79fc6492f3af13d)(player.position, new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(playerSize, playerSize));\n        const levelRects = level.rects;\n        for (const levelRect of levelRects){\n            const intersects = (0, $d78f250177f3f870$export$21bdf2710da1b0d7)(playerRect, levelRect);\n            if (intersects) this.handleCollision(playerRect, levelRect);\n        }\n    }\n    handleCollision(playerRect, levelRect) {\n        const { player: player } = this;\n        const pw = playerRect.size.x;\n        const ph = playerRect.size.y;\n        const px = playerRect.position.x - pw / 2;\n        const py = playerRect.position.y - ph / 2;\n        const lw = levelRect.size.x;\n        const lh = levelRect.size.y;\n        const lx = levelRect.position.x - lw / 2;\n        const ly = levelRect.position.y - lh / 2;\n        const overlapX = Math.min(px + pw, lx + lw) - Math.max(px, lx);\n        const overlapY = Math.min(py + ph, ly + lh) - Math.max(py, ly);\n        if (overlapX < overlapY) {\n            if (px < lx) player.position.x -= overlapX;\n            else player.position.x += overlapX;\n            player.velocity.x = 0;\n        } else {\n            if (py < ly) player.position.y -= overlapY;\n            else player.position.y += overlapY;\n            player.velocity.y = 0;\n        }\n    }\n    onCursorMove() {\n        if (this.disableMouseCamera) return;\n        const { player: player, cursor: cursor, levelRenderer: levelRenderer } = this;\n        const cursorCellPosition = levelRenderer.cellPositionAt(cursor.position);\n        player.lookAt(cursorCellPosition);\n    }\n    onMouseWheel(event) {\n        if (event.ctrlKey) return;\n        event.preventDefault();\n        const delta = event.deltaY > 0 ? -1 : 1;\n        this.player.fovDegrees += delta;\n        this.player.fovDegrees = (0, $d78f250177f3f870$export$7d15b64cf5a3a4c4)(this.player.fovDegrees, 1, 179);\n        this.player.fov = (0, $d78f250177f3f870$export$b1b275608b2b1b8)(this.player.fovDegrees);\n    }\n}\n\n\n\n\n\n\n\n\n\n\nclass $d2119310ebf03276$export$a0bdfbc14a3adba0 {\n    constructor(canvas){\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n    }\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    fillRect(rect) {\n        const { position: position, size: size } = rect;\n        const halfSize = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).divScalar(size, 2);\n        this.ctx.fillRect(position.x - halfSize.x, position.y - halfSize.y, size.x, size.y);\n    }\n    fillText(text, position) {\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n        this.ctx.fillText(text, position.x, position.y);\n    }\n    fillCircle(position, radius) {\n        this.ctx.beginPath();\n        this.ctx.arc(position.x, position.y, radius, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.closePath();\n    }\n    strokeLine(line) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(line.p1.x, line.p1.y);\n        this.ctx.lineTo(line.p2.x, line.p2.y);\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    drawPolygon(polygon, mode) {\n        const { points: points } = polygon;\n        const firstPoint = points[0];\n        this.ctx.beginPath();\n        this.ctx.moveTo(firstPoint.x, firstPoint.y);\n        for(let i = 1; i < points.length; i++){\n            const point = points[i];\n            this.ctx.lineTo(point.x, point.y);\n        }\n        this.ctx.lineTo(firstPoint.x, firstPoint.y);\n        this.ctx[mode]();\n        this.ctx.closePath();\n    }\n    strokePolygon(polygon) {\n        this.drawPolygon(polygon, 'stroke');\n    }\n    fillPolygon(polygon) {\n        this.drawPolygon(polygon, 'fill');\n    }\n    createLinearGradient(line) {\n        return this.ctx.createLinearGradient(line.p1.x, line.p1.y, line.p2.x, line.p2.y);\n    }\n    translate(position) {\n        this.ctx.translate(position.x, position.y);\n    }\n    scale(scale) {\n        this.ctx.scale(scale.x, scale.y);\n    }\n    save() {\n        this.ctx.save();\n    }\n    restore() {\n        this.ctx.restore();\n    }\n    set fillStyle(value) {\n        this.ctx.fillStyle = value;\n    }\n    set strokeStyle(value) {\n        this.ctx.strokeStyle = value;\n    }\n    set lineWidth(value) {\n        this.ctx.lineWidth = value;\n    }\n    set lineCap(value) {\n        this.ctx.lineCap = value;\n    }\n    set lineJoin(value) {\n        this.ctx.lineJoin = value;\n    }\n    set font(value) {\n        this.ctx.font = value;\n    }\n    set globalAlpha(value) {\n        this.ctx.globalAlpha = value;\n    }\n}\n\n\nclass $246be329c647ef23$export$88530751e3977073 {\n    constructor(){\n        this.size = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0);\n        this.canvas = document.querySelector('canvas');\n        this.ctx = new (0, $d2119310ebf03276$export$a0bdfbc14a3adba0)(this.canvas);\n        this.resize();\n        window.addEventListener('resize', ()=>{\n            this.resize();\n        });\n    }\n    resize(w = window.innerWidth, h = window.innerHeight) {\n        this.canvas.width = w;\n        this.canvas.height = h;\n        this.size.set(w, h);\n        this.onResize();\n    }\n    onResize() {}\n}\n\n\nclass $c862d2503fd74177$export$666890657dd2cc88 extends (0, $246be329c647ef23$export$88530751e3977073) {\n    constructor(level, player, visibility){\n        super(), this.blockSize = 0, this.viewCount = 2, this.fovRaysLength = 10000, this.renderGrid = false, this.fovLines = [], this.centerFovLine = new (0, $a3b594b1af91c51e$export$17d680238e50603e)(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0), new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0)), this.centerIntersection = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0), this.fovPolygon = new (0, $3507c17b1074d59c$export$7d31b617c820d435)([]), this.levelHalfSize = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0), this.offset = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0), this.viewSize = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0);\n        this.level = level;\n        this.player = player;\n        this.visibility = visibility;\n        this.init();\n        this.update();\n        this.onResize();\n    }\n    onResize() {\n        if (!this.visibility) return;\n        this.updateProperties();\n        const position = this.cellPositionAt(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0));\n        const size = this.size.clone().divScalar(this.blockSize);\n        this.visibility.setBounds(position, size);\n    }\n    init() {\n        this.levelHalfSize = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).divScalar(this.level.size, 2);\n        this.offset = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).mulScalar(this.levelHalfSize, -1).addScalar(0.5);\n        this.visibility.loadMap(this.level.rects);\n        this.level.forEach((cell)=>{\n            const { position: position } = cell;\n            const rect = new (0, $90c710c7d5aa6658$export$c79fc6492f3af13d)(position, new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(1, 1));\n            const points = (0, $d78f250177f3f870$export$6295e450519f928d)(rect);\n            const lines = (0, $d78f250177f3f870$export$961147ea8c83e176)(rect);\n            cell.userData = {\n                rect: rect,\n                points: points,\n                lines: lines,\n                pointsInFov: [],\n                insideFov: false\n            };\n        });\n    }\n    updateProperties() {\n        const { size: size, viewCount: viewCount, level: level } = this;\n        this.viewSize = new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(size.x / viewCount, size.y);\n        this.blockSize = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).div(this.viewSize, level.size).min();\n    }\n    updateFovTriangle() {\n        const { fovRaysLength: fovRaysLength, player: player } = this;\n        const getFovPoint = (angle)=>(0, $b1c52281d4eed456$export$c977b3e384af9ae1).fromAngle(player.angle + angle).mulScalar(fovRaysLength).add(player.position);\n        const halfFov = player.fov / 2;\n        const point1 = getFovPoint(-halfFov);\n        const point2 = getFovPoint(halfFov);\n        this.fovLines = [\n            new (0, $a3b594b1af91c51e$export$17d680238e50603e)(player.position, point1),\n            new (0, $a3b594b1af91c51e$export$17d680238e50603e)(player.position, point2)\n        ];\n        this.centerFovLine = new (0, $a3b594b1af91c51e$export$17d680238e50603e)(player.position, (0, $b1c52281d4eed456$export$c977b3e384af9ae1).fromAngle(player.angle).mulScalar(fovRaysLength).add(player.position));\n        let closestIntersection = null;\n        let closestDistance = Infinity;\n        for (const line of this.level.lines){\n            const intersection = (0, $d78f250177f3f870$export$f9d463325d36ce37)(this.centerFovLine, line);\n            if (intersection?.cross) {\n                const distance = (0, $d78f250177f3f870$export$5082664ed3e64ee8)(player.position, intersection.position);\n                if (distance < closestDistance) {\n                    closestDistance = distance;\n                    closestIntersection = intersection.position;\n                }\n            }\n        }\n        this.centerIntersection = closestIntersection ?? this.centerFovLine.p2;\n    }\n    isPointInFov(point) {\n        let angle = (0, $d78f250177f3f870$export$47cb7eb79666608a)(this.player.position, point);\n        angle = (0, $d78f250177f3f870$export$e3df76cf4464bc81)(angle - this.player.angle);\n        const halfFov = this.player.fov / 2;\n        return Math.abs(angle) <= halfFov;\n    }\n    isCellInFov(cell) {\n        const { rect: rect, points: points } = cell.userData;\n        return (0, $d78f250177f3f870$export$ee6b921fdc6f9dbe)(this.player.position, rect) || points.some((point)=>this.isPointInFov(point));\n    }\n    updateCell(cell) {\n        cell.userData.insideFov = this.isCellInFov(cell);\n    }\n    update() {\n        this.updateProperties();\n        this.updateFovTriangle();\n        this.level.forEach((cell)=>{\n            this.updateCell(cell);\n        });\n        this.fovPolygon = this.visibility.getClippedPolygon(this.fovLines);\n    }\n    render() {\n        this.ctx.clear();\n        this.renderView(()=>this.render2DView(), 0);\n        this.renderView(()=>this.render3DView(), 1);\n    }\n    getViewCenter(viewIndex) {\n        const viewCenter = (0, $b1c52281d4eed456$export$c977b3e384af9ae1).divScalar(this.viewSize, 2);\n        viewCenter.x += viewIndex * this.viewSize.x;\n        return viewCenter;\n    }\n    cellPositionAt(position) {\n        const viewCenter = this.getViewCenter(0);\n        return (0, $b1c52281d4eed456$export$c977b3e384af9ae1).sub(position, viewCenter).divScalar(this.blockSize).add(this.levelHalfSize).subScalar(0.5);\n    }\n    renderView(callback, viewIndex) {\n        const viewCenter = this.getViewCenter(viewIndex);\n        this.ctx.save();\n        this.ctx.translate(viewCenter);\n        callback();\n        this.ctx.restore();\n    }\n    render2DView() {\n        const { ctx: ctx, blockSize: blockSize, offset: offset, level: level, player: player } = this;\n        ctx.scale(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(blockSize, blockSize));\n        ctx.translate(offset);\n        if (this.renderGrid) level.forEach((cell)=>{\n            const { char: char, position: position } = cell;\n            const { insideFov: insideFov } = cell.userData;\n            ctx.globalAlpha = insideFov ? 1 : 0.25;\n            ctx.fillStyle = (0, $9d936a2aecb96285$export$8f45430ccf837300).characters[char] || 'white';\n            ctx.font = `1px Arial`;\n            ctx.fillText(char, position);\n            ctx.globalAlpha = 1;\n        });\n        ctx.fillStyle = (0, $9d936a2aecb96285$export$8f45430ccf837300).player;\n        ctx.fillCircle(player.position, 0.25);\n        ctx.lineWidth = 0.075;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        ctx.strokeStyle = 'white';\n        ctx.strokePolygon(this.visibility.outputPolygon);\n        ctx.strokeStyle = 'yellow';\n        ctx.strokePolygon(this.fovPolygon);\n    }\n    render3DView() {\n        const { ctx: ctx } = this;\n        ctx.fillStyle = '#101010';\n        ctx.fillRect(new (0, $90c710c7d5aa6658$export$c79fc6492f3af13d)(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(0, 0), this.viewSize));\n        const wallPoints = [];\n        const fovPoints = this.fovPolygon.points.slice(1);\n        const maxHeight = this.size.y;\n        const halfFov = this.player.fov / 2;\n        const normalizeAngleUnit = (angle)=>{\n            return ((0, $d78f250177f3f870$export$e3df76cf4464bc81)(angle - this.player.angle) + halfFov) / this.player.fov;\n        };\n        const minAngle = normalizeAngleUnit(this.player.angle - halfFov);\n        const maxAngle = normalizeAngleUnit(this.player.angle + halfFov);\n        for(let i = 0; i < fovPoints.length; i++){\n            const point = fovPoints[i];\n            const angle = (0, $d78f250177f3f870$export$47cb7eb79666608a)(this.player.position, point);\n            const normalizedAngle = normalizeAngleUnit(angle);\n            const cos = Math.cos(angle - this.player.angle);\n            const distance = (0, $d78f250177f3f870$export$5082664ed3e64ee8)(this.player.position, point) * cos;\n            const height = maxHeight / distance;\n            const percentage = (normalizedAngle - minAngle) / (maxAngle - minAngle);\n            const x = this.viewSize.x * percentage - this.viewSize.x / 2;\n            const brightness = height / maxHeight;\n            wallPoints.push({\n                x: x,\n                height: height,\n                brightness: brightness\n            });\n        }\n        for(let i = 0; i < wallPoints.length; i++){\n            const currPoint = wallPoints[i];\n            const nextPoint = wallPoints[i + 1];\n            if (!nextPoint) break;\n            const x1 = currPoint.x;\n            const x2 = nextPoint.x;\n            const h1 = currPoint.height;\n            const h2 = nextPoint.height;\n            const b1 = currPoint.brightness;\n            const b2 = nextPoint.brightness;\n            const polygon = new (0, $3507c17b1074d59c$export$7d31b617c820d435)([\n                new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(x1, -h1 / 2),\n                new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(x1, +h1 / 2),\n                new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(x2, +h2 / 2),\n                new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(x2, -h2 / 2)\n            ]);\n            const gradient = ctx.createLinearGradient(new (0, $a3b594b1af91c51e$export$17d680238e50603e)(new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(x1, 0), new (0, $b1c52281d4eed456$export$c977b3e384af9ae1)(x2, 0)));\n            const wallRgb = [\n                200,\n                200,\n                200\n            ];\n            const wallRgbStr = wallRgb.join(', ');\n            gradient.addColorStop(0, `rgba(${wallRgbStr}, ${b1})`);\n            gradient.addColorStop(1, `rgba(${wallRgbStr}, ${b2})`);\n            ctx.fillStyle = gradient;\n            ctx.fillPolygon(polygon);\n            ctx.strokeStyle = 'black';\n            ctx.lineWidth = window.innerWidth / 1000;\n            ctx.strokePolygon(polygon);\n        }\n    }\n}\n\n\nfunction $ad2bcec7a0192558$var$main() {\n    const closeInfoBtn = document.querySelector('.close-info-btn');\n    closeInfoBtn.addEventListener('click', ()=>{\n        const infoOverlay = closeInfoBtn.closest('.info-overlay');\n        infoOverlay.classList.add('close');\n    });\n    const level = (0, $36888477c1b74358$export$ca664994d1d54bff).fromString((0, $9d936a2aecb96285$export$3c2d24a8ea6992f9));\n    const spawn = level.find('@');\n    const player = new (0, $da2fd7912630ee09$export$2616165974278734)(spawn.position.clone());\n    const visibility = new (0, $56210ab632d05b2f$export$5afe92775e3e701d)(player);\n    const levelRenderer = new (0, $c862d2503fd74177$export$666890657dd2cc88)(level, player, visibility);\n    const cursor = new (0, $361c27d9ec34e012$export$b6a79797ad180576)();\n    const keyboard = new (0, $bc480dbcff87c0d9$export$16e4d70cc375e707)();\n    const playerCtrl = new (0, $d4c9f062fc6eae44$export$cbacd6dcfff5ae2e)(player, keyboard, cursor, levelRenderer);\n    let last = performance.now(), accumulator = 0, targetFps = 60, targetInterval = 1000 / targetFps;\n    function step() {\n        const now = performance.now();\n        const delta = now - last;\n        last = now;\n        accumulator += delta;\n        while(accumulator >= targetInterval){\n            playerCtrl.update();\n            visibility.update();\n            levelRenderer.update();\n            levelRenderer.render();\n            accumulator -= targetInterval;\n        }\n        requestAnimationFrame(step);\n    }\n    step();\n    Object.assign(window, {\n        player: player,\n        level: level,\n        visibility: visibility,\n        levelRenderer: levelRenderer,\n        cursor: cursor,\n        keyboard: keyboard\n    });\n}\n$ad2bcec7a0192558$var$main();\n\n\n//# sourceMappingURL=2d-raycaster.b97e1aa9.js.map\n","import { Level } from './Level';\r\nimport { levelString } from './config';\r\nimport { Cursor } from './inputs/Cursor';\r\nimport { Keyboard } from './inputs/Keyboard';\r\nimport { Visibility } from './math/Visibility';\r\nimport { Player } from './player/Player';\r\nimport { PlayerController } from './player/PlayerController';\r\nimport { LevelRenderer } from './rendering/LevelRenderer';\r\n\r\nfunction main() {\r\n    const closeInfoBtn = document.querySelector('.close-info-btn')!;\r\n\r\n    closeInfoBtn.addEventListener('click', () => {\r\n        const infoOverlay = closeInfoBtn.closest('.info-overlay')!;\r\n\r\n        infoOverlay.classList.add('close');\r\n    });\r\n\r\n    const level = Level.fromString(levelString);\r\n    const spawn = level.find('@')!;\r\n    const player = new Player(spawn.position.clone());\r\n    const visibility = new Visibility(player);\r\n    const levelRenderer = new LevelRenderer(level, player, visibility);\r\n    const cursor = new Cursor();\r\n    const keyboard = new Keyboard();\r\n    const playerCtrl = new PlayerController(player, keyboard, cursor, levelRenderer);\r\n\r\n    let last = performance.now(),\r\n        accumulator = 0,\r\n        targetFps = 60,\r\n        targetInterval = 1000 / targetFps;\r\n\r\n    function step() {\r\n        const now = performance.now();\r\n        const delta = now - last;\r\n\r\n        last = now;\r\n        accumulator += delta;\r\n\r\n        while (accumulator >= targetInterval) {\r\n            playerCtrl.update();\r\n            visibility.update();\r\n            levelRenderer.update();\r\n            levelRenderer.render();\r\n            \r\n            accumulator -= targetInterval;\r\n        }\r\n\r\n        requestAnimationFrame(step);\r\n    }\r\n\r\n    step();\r\n\r\n    Object.assign(window, {\r\n        player,\r\n        level,\r\n        visibility,\r\n        levelRenderer,\r\n        cursor,\r\n        keyboard\r\n    });\r\n}\r\n\r\nmain();","import { greedyRects } from './math/greedyRects';\r\nimport { Line } from './math/Line';\r\nimport { Rect } from './math/Rect';\r\nimport { createGrid, rect2lines, rect2points } from './math/utils';\r\nimport { Vector2 } from './math/Vector2';\r\n\r\ntype ForEachCallback = (cell: Cell, stop: () => void) => void;\r\n\r\nexport class Cell {\r\n    char: string;\r\n    position: Vector2;\r\n    userData?: any;\r\n\r\n    constructor(char: string, position: Vector2, userData?: any) {\r\n        this.char = char;\r\n        this.position = position;\r\n        this.userData = userData;\r\n    }\r\n}\r\n\r\nexport class Level {\r\n    size: Vector2;\r\n    cells: Cell[][];\r\n    rects: Rect[] = [];\r\n    lines: Line[] = [];\r\n    points: Vector2[] = [];\r\n\r\n    static fromString(levelString: string) {\r\n        const rows = levelString.trim().split('\\n');\r\n        const width = rows[0].length;\r\n        const height = rows.length;\r\n        const level = new Level(width, height);\r\n\r\n        for (let y = 0; y < height; y++) {\r\n            const row = rows[y];\r\n\r\n            for (let x = 0; x < width; x++) {\r\n                const char = row[x];\r\n                const poisition = new Vector2(x, y);\r\n                const cell = new Cell(char, poisition);\r\n\r\n                level.set(x, y, cell);\r\n            }\r\n        }\r\n\r\n        level.bake();\r\n\r\n        return level;\r\n    }\r\n\r\n    constructor(width: number, height: number) {\r\n        this.size = new Vector2(width, height);\r\n        this.cells = createGrid(width, height);\r\n    }\r\n\r\n    bake() {\r\n        const grid = createGrid(this.size.x, this.size.y, (x, y) => {\r\n            const cell = this.get(x, y);\r\n\r\n            return cell.char === '#' ? 1 : 0;\r\n        });\r\n\r\n        const rects = greedyRects(grid);\r\n\r\n        rects.forEach((rect) => {\r\n            rect.position\r\n                .add(Vector2.divScalar(rect.size, 2))\r\n                .subScalar(0.5);\r\n\r\n            const points = rect2points(rect);\r\n            const lines = rect2lines(rect);\r\n            \r\n            this.points.push(...points);\r\n            this.lines.push(...lines);\r\n            this.rects.push(rect);\r\n        });\r\n    }\r\n\r\n    forEach(callback: ForEachCallback, ignoreEmpty = true) {\r\n        let result: Cell | undefined;\r\n\r\n        for (let y = 0; y < this.size.y; y++) {\r\n            const row = this.cells[y];\r\n\r\n            for (let x = 0; x < this.size.x; x++) {\r\n                const cell = row[x];\r\n\r\n                if (ignoreEmpty && cell.char === ' ') continue;\r\n\r\n                const stop = () => result = cell;\r\n\r\n                callback(cell, stop);\r\n\r\n                if (result) return result;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    find(character: string) {\r\n        return this.forEach((cell, stop) => {\r\n            if (cell.char === character) stop();\r\n        });\r\n    }\r\n\r\n    set(x: number, y: number, cell: Cell) {\r\n        this.cells[y][x] = cell;\r\n    }\r\n\r\n    get(x: number, y: number) {\r\n        return this.cells[y][x];\r\n    }\r\n}","import { Rect } from './Rect';\r\nimport { Vector2 } from './Vector2';\r\n\r\nclass MaxHeap<T> {\r\n    private data: T[] = [];\r\n    private comparator: (a: T, b: T) => number;\r\n\r\n    constructor(comparator: (a: T, b: T) => number) {\r\n        this.comparator = comparator;\r\n    }\r\n\r\n    public push(item: T): void {\r\n        this.data.push(item);\r\n\r\n        for (let index = this.data.length - 1; index > 0;) {\r\n            const parentIndex = (index - 1) >>> 1;\r\n            if (this.comparator(this.data[index], this.data[parentIndex]) <= 0) {\r\n                break;\r\n            }\r\n            [this.data[parentIndex], this.data[index]] = [this.data[index], this.data[parentIndex]];\r\n            index = parentIndex;\r\n        }\r\n    }\r\n\r\n    public pop(): T | null {\r\n        const length = this.data.length;\r\n        if (length === 0) return null;\r\n\r\n        const top = this.data[0];\r\n        const last = this.data.pop() as T;\r\n\r\n        if (this.data.length > 0) {\r\n            this.data[0] = last;\r\n\r\n            for (let index = 0; ;) {\r\n                const left = (index << 1) + 1;\r\n                const right = left + 1;\r\n                let largest = index;\r\n\r\n                if (\r\n                    left < this.data.length &&\r\n                    this.comparator(this.data[left], this.data[largest]) > 0\r\n                ) {\r\n                    largest = left;\r\n                }\r\n                if (\r\n                    right < this.data.length &&\r\n                    this.comparator(this.data[right], this.data[largest]) > 0\r\n                ) {\r\n                    largest = right;\r\n                }\r\n                if (largest === index) break;\r\n                [this.data[index], this.data[largest]] = [this.data[largest], this.data[index]];\r\n                index = largest;\r\n            }\r\n        }\r\n        return top;\r\n    }\r\n\r\n    public get size(): number {\r\n        return this.data.length;\r\n    }\r\n}\r\n\r\nfunction compareArea(a: Rect, b: Rect): number {\r\n    return a.size.x * a.size.y - b.size.x * b.size.y;\r\n}\r\n\r\nfunction genericKey(...components: number[]): string {\r\n    return components.join(',');\r\n}\r\n\r\nfunction rectKey(rect: Rect): string {\r\n    return genericKey(\r\n        rect.position.x,\r\n        rect.position.y,\r\n        rect.size.x,\r\n        rect.size.y\r\n    );\r\n}\r\n\r\nfunction buildInitialRectangles(\r\n    matrix: number[][],\r\n    heap: MaxHeap<Rect>,\r\n    seen: Set<string>\r\n) {\r\n    const rowCount = matrix.length;\r\n    const colCount = matrix[0].length;\r\n    const runLength = new Array<number>(rowCount).fill(0);\r\n\r\n    for (let col = colCount - 1; col >= 0; col--) {\r\n        for (let row = 0; row < rowCount; row++) {\r\n            runLength[row] = matrix[row][col] ? runLength[row] + 1 : 0;\r\n        }\r\n\r\n        const stackItems: { startRow: number; prevWidth: number }[] = [];\r\n        let currentMaxWidth = 0;\r\n\r\n        for (let row = 0; row <= rowCount; row++) {\r\n            const widthAtRow = row < rowCount ? runLength[row] : 0;\r\n\r\n            if (widthAtRow > currentMaxWidth) {\r\n                stackItems.push({ startRow: row, prevWidth: currentMaxWidth });\r\n                currentMaxWidth = widthAtRow;\r\n            } else if (widthAtRow < currentMaxWidth) {\r\n                while (stackItems.length > 0 && widthAtRow < currentMaxWidth) {\r\n                    const { startRow, prevWidth } = stackItems.pop()!;\r\n                    const height = row - startRow;\r\n                    const w = currentMaxWidth;\r\n                    const rect = new Rect(\r\n                        new Vector2(col, startRow),\r\n                        new Vector2(w, height)\r\n                    );\r\n                    const key = genericKey(col, startRow, w, height);\r\n                    if (!seen.has(key)) {\r\n                        seen.add(key);\r\n                        heap.push(rect);\r\n                    }\r\n                    currentMaxWidth = prevWidth;\r\n                }\r\n\r\n                if (widthAtRow > currentMaxWidth) {\r\n                    stackItems.push({ startRow: row, prevWidth: currentMaxWidth });\r\n                    currentMaxWidth = widthAtRow;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isEdgesClear(\r\n    rect: Rect,\r\n    usedMask: Uint8Array,\r\n    colCount: number\r\n) {\r\n    const x0 = rect.position.x;\r\n    const y0 = rect.position.y;\r\n    const width = rect.size.x;\r\n    const height = rect.size.y;\r\n\r\n    for (let dx = 0; dx < width; dx++) {\r\n        const topIndex = y0 * colCount + x0 + dx;\r\n        const bottomIndex = (y0 + height - 1) * colCount + x0 + dx;\r\n        if (usedMask[topIndex] === 1 || usedMask[bottomIndex] === 1) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let dy = 0; dy < height; dy++) {\r\n        const leftIndex = (y0 + dy) * colCount + x0;\r\n        const rightIndex = (y0 + dy) * colCount + x0 + width - 1;\r\n        if (usedMask[leftIndex] === 1 || usedMask[rightIndex] === 1) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction markRectangle(\r\n    rect: Rect,\r\n    usedMask: Uint8Array,\r\n    colCount: number\r\n) {\r\n    const x0 = rect.position.x;\r\n    const y0 = rect.position.y;\r\n    const width = rect.size.x;\r\n    const height = rect.size.y;\r\n\r\n    for (let dy = 0; dy < height; dy++) {\r\n        let baseIndex = (y0 + dy) * colCount + x0;\r\n        for (let dx = 0; dx < width; dx++) {\r\n            usedMask[baseIndex + dx] = 1;\r\n        }\r\n    }\r\n}\r\n\r\nfunction spawnChildren(\r\n    rect: Rect,\r\n    heap: MaxHeap<Rect>,\r\n    seen: Set<string>\r\n) {\r\n    const width = rect.size.x;\r\n    const height = rect.size.y;\r\n\r\n    if (width > 1) {\r\n        const childW = new Rect(\r\n            rect.position.clone(),\r\n            new Vector2(width - 1, height)\r\n        );\r\n\r\n        const keyW = rectKey(childW);\r\n        if (!seen.has(keyW)) {\r\n            seen.add(keyW);\r\n            heap.push(childW);\r\n        }\r\n    }\r\n\r\n    if (height > 1) {\r\n        const childH = new Rect(\r\n            rect.position.clone(),\r\n            new Vector2(width, height - 1)\r\n        );\r\n\r\n        const keyH = rectKey(childH);\r\n        if (!seen.has(keyH)) {\r\n            seen.add(keyH);\r\n            heap.push(childH);\r\n        }\r\n    }\r\n}\r\n\r\nexport function greedyRects(matrix: number[][]): Rect[] {\r\n    const rowCount = matrix.length;\r\n    if (rowCount === 0) return [];\r\n\r\n    const colCount = matrix[0].length;\r\n    const usedMask = new Uint8Array(rowCount * colCount);\r\n    const heap = new MaxHeap<Rect>(compareArea);\r\n    const seen = new Set<string>();\r\n\r\n    buildInitialRectangles(matrix, heap, seen);\r\n\r\n    const result: Rect[] = [];\r\n\r\n    while (heap.size > 0) {\r\n        const rect = heap.pop();\r\n        if (!rect) break;\r\n\r\n        const key = rectKey(rect);\r\n        if (!seen.has(key)) continue;\r\n        \r\n        seen.delete(key);\r\n\r\n        if (isEdgesClear(rect, usedMask, colCount)) {\r\n            markRectangle(rect, usedMask, colCount);\r\n\r\n            result.push(rect);\r\n        } else {\r\n            spawnChildren(rect, heap, seen);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { Vector2 } from './Vector2';\r\n\r\nexport class Rect {\r\n    position: Vector2;\r\n    size: Vector2;\r\n    userData?: any;\r\n\r\n    constructor(position: Vector2, size: Vector2, userData?: any) {\r\n        this.position = position;\r\n        this.size = size;\r\n        this.userData = userData;\r\n    }\r\n}","export class Vector2 {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    equals(v: Vector2) {\r\n        return this.x === v.x && this.y === v.y;\r\n    }\r\n\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n\r\n    min() {\r\n        return Math.min(this.x, this.y);\r\n    }\r\n\r\n    max() {\r\n        return Math.max(this.x, this.y);\r\n    }\r\n\r\n    fn(fn: (n: number) => number) {\r\n        this.x = fn(this.x);\r\n        this.y = fn(this.y);\r\n        return this;\r\n    }\r\n\r\n    static fromAngle(angle: number) {\r\n        return new Vector2(Math.cos(angle), Math.sin(angle));\r\n    }\r\n\r\n    magnitude() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    length() {\r\n        return this.magnitude();\r\n    }\r\n\r\n    dot(v: Vector2) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n\r\n    static normalize(a: Vector2) {\r\n        const length = a.magnitude();\r\n\r\n        if (length === 0) {\r\n            return new Vector2(0, 0);\r\n        }\r\n\r\n        return new Vector2(a.x / length, a.y / length);\r\n    }\r\n\r\n    normalize() {\r\n        const length = this.magnitude();\r\n\r\n        if (length === 0) {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            return this;\r\n        }\r\n\r\n        this.x /= length;\r\n        this.y /= length;\r\n        return this;\r\n    }\r\n\r\n    static add(a: Vector2, b: Vector2) {\r\n        return new Vector2(a.x + b.x, a.y + b.y);\r\n    }\r\n\r\n    static addScalar(a: Vector2, s: number) {\r\n        return new Vector2(a.x + s, a.y + s);\r\n    }\r\n\r\n    add(v: Vector2) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n\r\n    addScalar(s: number) {\r\n        this.x += s;\r\n        this.y += s;\r\n        return this;\r\n    }\r\n\r\n    static sub(a: Vector2, b: Vector2) {\r\n        return new Vector2(a.x - b.x, a.y - b.y);\r\n    }\r\n\r\n    static subScalar(a: Vector2, s: number) {\r\n        return new Vector2(a.x - s, a.y - s);\r\n    }\r\n\r\n    sub(v: Vector2) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n\r\n    subScalar(s: number) {\r\n        this.x -= s;\r\n        this.y -= s;\r\n        return this;\r\n    }\r\n\r\n    static mul(a: Vector2, b: Vector2) {\r\n        return new Vector2(a.x * b.x, a.y * b.y);\r\n    }\r\n\r\n    static mulScalar(a: Vector2, s: number) {\r\n        return new Vector2(a.x * s, a.y * s);\r\n    }\r\n\r\n    mul(v: Vector2) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n\r\n    mulScalar(s: number) {\r\n        this.x *= s;\r\n        this.y *= s;\r\n        return this;\r\n    }\r\n\r\n    static div(a: Vector2, b: Vector2) {\r\n        return new Vector2(a.x / b.x, a.y / b.y);\r\n    }\r\n\r\n    static divScalar(a: Vector2, s: number) {\r\n        return new Vector2(a.x / s, a.y / s);\r\n    }\r\n\r\n    div(v: Vector2) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n\r\n    divScalar(s: number) {\r\n        this.x /= s;\r\n        this.y /= s;\r\n        return this;\r\n    }\r\n}","import { Line } from './Line';\r\nimport { Rect } from './Rect';\r\nimport { Vector2 } from './Vector2';\r\n\r\nexport const deg2rad = (deg: number) => (deg * Math.PI) / 180;\r\nexport const distanceBetween = (a: Vector2, b: Vector2) => Math.hypot(b.x - a.x, b.y - a.y);\r\nexport const angleBetween = (a: Vector2, b: Vector2) => Math.atan2(b.y - a.y, b.x - a.x);\r\nexport const lerp = (a: number, b: number, t: number) => a + (b - a) * t;\r\nexport const clamp = (value: number, min: number, max: number) => Math.max(min, Math.min(max, value));\r\n\r\nexport function normalizeAngle(theta: number) {\r\n    theta = (theta + Math.PI) % (2 * Math.PI);\r\n\r\n    return theta < 0 ? theta + Math.PI : theta - Math.PI;\r\n}\r\n\r\nexport type Intersection = { position: Vector2; cross: boolean }\r\n\r\nexport function linesIntersect(l1: Line, l2: Line): Intersection | null {\r\n    const { p1: { x: x1, y: y1 }, p2: { x: x2, y: y2 } } = l1;\r\n    const { p1: { x: x3, y: y3 }, p2: { x: x4, y: y4 } } = l2;\r\n\r\n    const dx1 = x2 - x1, dy1 = y2 - y1;\r\n    const dx2 = x4 - x3, dy2 = y4 - y3;\r\n\r\n    const denom = dy2 * dx1 - dx2 * dy1;\r\n    if (!denom) return null;\r\n\r\n    const dx13 = x1 - x3;\r\n    const dy13 = y1 - y3;\r\n    const ua = (dx2 * dy13 - dy2 * dx13) / denom;\r\n    const ub = (dx1 * dy13 - dy1 * dx13) / denom;\r\n\r\n    const position = new Vector2(x1 + ua * dx1, y1 + ua * dy1);\r\n    const cross = ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1;\r\n\r\n    return { position, cross };\r\n}\r\n\r\nexport function rectsIntersect(r1: Rect, r2: Rect) {\r\n    const { position: p1, size: s1 } = r1;\r\n    const { position: p2, size: s2 } = r2;\r\n\r\n    return (\r\n        p1.x - s1.x / 2 < p2.x + s2.x / 2 &&\r\n        p1.x + s1.x / 2 > p2.x - s2.x / 2 &&\r\n        p1.y - s1.y / 2 < p2.y + s2.y / 2 &&\r\n        p1.y + s1.y / 2 > p2.y - s2.y / 2\r\n    );\r\n}\r\n\r\nexport function rayCast(ray: Line, lines: Line[]) {\r\n    let closestIntersection: Intersection | null = null,\r\n        closestDistance = Infinity;\r\n\r\n    for (const line of lines) {\r\n        const intersection = linesIntersect(ray, line);\r\n\r\n        if (intersection?.cross) {\r\n            const distance = distanceBetween(ray.p1, intersection.position);\r\n\r\n            if (distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestIntersection = intersection;\r\n            }\r\n        }\r\n    }\r\n\r\n    return closestIntersection?.position ?? null;\r\n}\r\n\r\nexport function pointInRect(point: Vector2, rect: Rect): boolean {\r\n    const { position, size } = rect;\r\n    const halfSize = Vector2.divScalar(size, 2);\r\n\r\n    return (\r\n        point.x >= position.x - halfSize.x &&\r\n        point.x <= position.x + halfSize.x &&\r\n        point.y >= position.y - halfSize.y &&\r\n        point.y <= position.y + halfSize.y\r\n    );\r\n}\r\n\r\nexport function rect2points(rect: Rect): Vector2[] {\r\n    const { position, size } = rect;\r\n    const halfSize = Vector2.divScalar(size, 2);\r\n\r\n    return [\r\n        Vector2.add(position, new Vector2(-1, -1).mul(halfSize)),\r\n        Vector2.add(position, new Vector2(+1, -1).mul(halfSize)),\r\n        Vector2.add(position, new Vector2(+1, +1).mul(halfSize)),\r\n        Vector2.add(position, new Vector2(-1, +1).mul(halfSize)),\r\n    ];\r\n}\r\n\r\nexport function rect2lines(rect: Rect): Line[] {\r\n    const points = rect2points(rect);\r\n\r\n    return [\r\n        new Line(points[0], points[1]),\r\n        new Line(points[1], points[2]),\r\n        new Line(points[2], points[3]),\r\n        new Line(points[3], points[0]),\r\n    ];\r\n}\r\n\r\nexport function createGrid(width: number, height: number, fill?: (x: number, y: number) => any): any[][] {\r\n    const grid = new Array(height);\r\n\r\n    for (let i = 0; i < height; i++) {\r\n        grid[i] = new Array(width).fill(0);\r\n    }\r\n\r\n    if (!fill) return grid;\r\n\r\n    for (let y = 0; y < height; y++) {\r\n        for (let x = 0; x < width; x++) {\r\n            grid[y][x] = fill(x, y);\r\n        }\r\n    }\r\n\r\n    return grid;\r\n}","import { Vector2 } from './Vector2';\r\n\r\nexport class Line {\r\n    p1: Vector2;\r\n    p2: Vector2;\r\n    userData?: any;\r\n\r\n    constructor(p1: Vector2, p2: Vector2, userData?: any) {\r\n        this.p1 = p1;\r\n        this.p2 = p2;\r\n        this.userData = userData;\r\n    }\r\n}","export const levelString = `\r\n############\r\n#    #     #\r\n#    #@    #\r\n#    #     #\r\n#    ##### #\r\n#          #\r\n#          #\r\n#          #\r\n#          #\r\n#          #\r\n# # # # # ##\r\n############\r\n`;\r\n\r\n// export const levelString = `\r\n// #################################################################################\r\n// #@    #               #   #                 #   # #     #       #   #           #\r\n// ##### # ##### ####### # # # ############# # # # # # # ### # ##### # # ### ##### #\r\n// # #   #   # # #     # # #       #       # # # #   # #   # # #     #   # # #     #\r\n// # # ##### # # # ### # ### ##### # ##### # # # ##### ### # # # ######### # ##### #\r\n// # #   # # # #     # #   # #   # # #     # #   #   # #   # # # #         #     # #\r\n// # ### # # # ####### ### ### # # ### ### # ### # # # # ### # # # ############# # #\r\n// #   # #         #   # #     # #     # # #   # # #   # #   # #   #     #       # #\r\n// # ### ########### ### ####### ####### # ### ### ##### # ### ### # ### # ### #####\r\n// #     #   #     # #   #     #   #     # # #     #   # #   #   # #   #   #   #   #\r\n// # ##### # # ### # # # # # ##### # ### # # ####### # # ### ### # ### ######### # #\r\n// # #     #   # # # # # # # #     # # #   #         # #   #   #     #     #     # #\r\n// # ### ####### # # # # # # # ##### # ##### ####### # # ##### ########### # ##### #\r\n// #     #       # # # #   # #     # #           #   # # #   #   #   #   #       # #\r\n// ####### ####### # ##### # ##### # ############# ### # # # ### # # # # ######### #\r\n// #     #         # #   # #   #   #             # # # #   #   # # #   #         # #\r\n// # ### # ######### # # ### # # ############### # # # ##### ### # ############# # #\r\n// # #   #     #   # # #     # #   #   #       #   #   #   #     #   #         # # #\r\n// # ######### # # # # ####### ### # ### # ######### ### ########### # ####### # # #\r\n// # #       #   # # #   #   # # # #     # #     #   #           #   #       # # # #\r\n// # # ##### ##### # ### # ### # # ##### # # # # # ### ##### ### # ##### ##### # # #\r\n// #   #   #   #   #   # #   # # # #   # #   # # # #       # #   # #     #   # #   #\r\n// # ### # # # # ##### # ### # # # # # ####### # # ####### # ### # # ##### # # ### #\r\n// # #   #   # #       #   #     #   #       # # #     # # #   # # # #   # # # #   #\r\n// ### ####### ########### # ############### # ####### # # ### ### ### # # # # # ###\r\n// #   #     # #     #     # #           # # #     #   #   #   #   #   #   #   # # #\r\n// # ### ##### # ### # # ### # ####### # # # # ### # ### ### # # ### # ######### # #\r\n// # #       # #   # # #   # #     # # #   # # # # #   # #   # # #   # #   #     # #\r\n// # # ##### # ### # # ### # ##### # # ### # # # # ### ### ##### # ##### # # ##### #\r\n// # # #     #     # # # # # #   # # # #   # #   #         #     #       # # #     #\r\n// # # # ########### # # # ### # # # # # ### ######### ##### ####### ##### # # ### #\r\n// # # #           # #   # #   # #   # #   #   #     # #     #     # #     #   #   #\r\n// # # ####### ### # ##### # ### ### # ### ### # ### # # ##### ### ### ######### ###\r\n// # #   #   # # #   #     #   #   # # #   # # #   # # #         #   # #       # # #\r\n// # ### # # # # ##### ### ### # # # # ### # # ### # ##### ####### # # # # ##### # #\r\n// #   # # # #         #     # # # # #   #   #     #     #   #   # # #   #     #   #\r\n// ### ### # # ##### ######### # ### ### # ############# ##### # # # ####### # ### #\r\n// #   #   # # #   # #   #   # # #   # # # #     #     #   #   # # #       # #   # #\r\n// # ### ### ### # ### # # # # # # ### # ### ### # ### ### # ### ######### # # ### #\r\n// #       #     #     #   #   #       #       #     #       #             # #     #\r\n// #################################################################################\r\n// `;\r\n\r\nexport const colors = {\r\n    characters: {\r\n        ' ': '#000000',\r\n        '#': '#ffffff',\r\n        '@': '#80e020',\r\n    },\r\n    player: '#0ed180',\r\n    rays: '#ffff00'\r\n};","import { Vector2 } from '../math/Vector2';\r\n\r\nexport class Cursor {\r\n    position = new Vector2(0, 0);\r\n    isDown = false;\r\n    ctrl = new AbortController();\r\n\r\n    constructor() {\r\n        this.setupEvents();\r\n    }\r\n\r\n    setupEvents() {\r\n        const { signal } = this.ctrl;\r\n\r\n        document.addEventListener('mousemove', (event) => {\r\n            this.position = new Vector2(event.clientX, event.clientY);\r\n            this.onMouseMove(event);\r\n        }, { signal });\r\n\r\n        document.addEventListener('mousedown', (event) => {\r\n            this.isDown = true;\r\n            this.onMouseDown(event);\r\n        }, { signal });\r\n\r\n        document.addEventListener('mouseup', (event) => {\r\n            this.isDown = false;\r\n            this.onMouseUp(event);\r\n        }, { signal });\r\n\r\n        document.addEventListener('click', (event) => {\r\n            this.onMouseClick(event);\r\n        }, { signal });\r\n\r\n        document.addEventListener('wheel', (event) => {\r\n            this.onMouseWheel(event);\r\n        }, { signal });\r\n    }\r\n\r\n    onMouseMove(event: MouseEvent) { }\r\n    onMouseDown(event: MouseEvent) { }\r\n    onMouseUp(event: MouseEvent) { }\r\n    onMouseClick(event: MouseEvent) { }\r\n    onMouseWheel(event: WheelEvent) { }\r\n\r\n    destroy() {\r\n        this.ctrl.abort();\r\n    }\r\n}","export class Keyboard {\r\n    pressedKeys = new Set<string>();\r\n    ctrl = new AbortController();\r\n    ignoreCase: boolean;\r\n\r\n    constructor(options?: { ignoreCase: boolean }) {\r\n        this.ignoreCase = options?.ignoreCase ?? true;\r\n        this.setupEvents();\r\n    }\r\n\r\n    getKey(key: string) {\r\n        return this.ignoreCase ? key.toUpperCase() : key;\r\n    }\r\n\r\n    isKeyDown(key: string) {\r\n        return this.pressedKeys.has(this.getKey(key));\r\n    }\r\n\r\n    setupEvents() {\r\n        const { signal } = this.ctrl;\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            this.pressedKeys.add(this.getKey(event.key));\r\n            this.onKeyDown(event);\r\n        }, { signal });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n            this.pressedKeys.delete(this.getKey(event.key));\r\n            this.onKeyUp(event);\r\n        }, { signal });\r\n    }\r\n\r\n    onKeyDown(event: KeyboardEvent) { }\r\n    onKeyUp(event: KeyboardEvent) { }\r\n\r\n    destroy() {\r\n        this.ctrl.abort();\r\n    }\r\n}","import { Player } from '../player/Player';\r\nimport { Line } from './Line';\r\nimport { Polygon } from './Polygon';\r\nimport { Rect } from './Rect';\r\nimport { linesIntersect, rect2lines } from './utils';\r\nimport { Vector2 } from './Vector2';\r\n\r\nclass EndPoint extends Vector2 {\r\n    begin = false;\r\n    angle = 0;\r\n    segment: Segment | null = null;\r\n    visualize = false;\r\n    userData?: any;\r\n\r\n    constructor(x = 0, y = 0, userData?: any) {\r\n        super(x, y);\r\n        this.userData = userData;\r\n    }\r\n}\r\n\r\nclass Segment {\r\n    p1!: EndPoint;\r\n    p2!: EndPoint;\r\n    distanceSquared = 0;\r\n    userData?: any;\r\n}\r\n\r\nexport class Visibility {\r\n    player: Player;\r\n\r\n    constructor(player: Player) {\r\n        this.player = player;\r\n    }\r\n\r\n    update() {\r\n        this.setLightLocation(this.player.position);\r\n        this.sweep();\r\n    }\r\n\r\n    private segments: Segment[] = [];\r\n    private endpoints: EndPoint[] = [];\r\n    private openSegments: Segment[] = [];\r\n\r\n    center = new Vector2(0, 0);\r\n    output: Vector2[] = [];\r\n    outputPolygon: Polygon = new Polygon([]);\r\n    intersectionsDetected: Array<[EndPoint, EndPoint, EndPoint, EndPoint]> = [];\r\n\r\n    loadMap(rects: Rect[]): void {\r\n        this.segments = [];\r\n        this.endpoints = [];\r\n\r\n        for (const rect of rects) {\r\n            for (const edge of rect2lines(rect)) {\r\n                this.addSegment(edge);\r\n            }\r\n        }\r\n    }\r\n\r\n    addSegment(...lines: Line[]): void {\r\n        for (const line of lines) {\r\n            const segment = new Segment();\r\n            const end1 = new EndPoint(line.p1.x, line.p1.y);\r\n            const end2 = new EndPoint(line.p2.x, line.p2.y);\r\n\r\n            end1.segment = segment;\r\n            end1.visualize = true;\r\n\r\n            end2.segment = segment;\r\n            end2.visualize = false;\r\n\r\n            segment.p1 = end1;\r\n            segment.p2 = end2;\r\n\r\n            segment.userData = line.userData;\r\n            end1.userData = line.userData;\r\n            end2.userData = line.userData;\r\n\r\n            this.segments.push(segment);\r\n            this.endpoints.push(end1, end2);\r\n        }\r\n    }\r\n\r\n    setBounds(position: Vector2, size: Vector2) {\r\n        const userData = { isBound: true };\r\n\r\n        this.segments = this.segments.filter(s => !s.userData?.isBound);\r\n        this.endpoints = this.endpoints.filter(e => !e.userData?.isBound);\r\n\r\n        this.addSegment(\r\n            new Line(\r\n                new Vector2(position.x, position.y),\r\n                new Vector2(position.x, position.y + size.y),\r\n                userData\r\n            ),\r\n            new Line(\r\n                new Vector2(position.x, position.y),\r\n                new Vector2(position.x + size.x, position.y),\r\n                userData\r\n            ),\r\n            new Line(\r\n                new Vector2(position.x + size.x, position.y),\r\n                new Vector2(position.x + size.x, position.y + size.y),\r\n                userData\r\n            ),\r\n            new Line(\r\n                new Vector2(position.x, position.y + size.y),\r\n                new Vector2(position.x + size.x, position.y + size.y),\r\n                userData\r\n            )\r\n        );\r\n    }\r\n\r\n    setLightLocation(position: Vector2): void {\r\n        this.center.set(position.x, position.y);\r\n        for (const segment of this.segments) {\r\n            const midX = 0.5 * (segment.p1.x + segment.p2.x);\r\n            const midY = 0.5 * (segment.p1.y + segment.p2.y);\r\n            const dx = midX - position.x;\r\n            const dy = midY - position.y;\r\n            segment.distanceSquared = dx * dx + dy * dy;\r\n            segment.p1.angle = Math.atan2(segment.p1.y - position.y, segment.p1.x - position.x);\r\n            segment.p2.angle = Math.atan2(segment.p2.y - position.y, segment.p2.x - position.x);\r\n            let deltaAngle = segment.p2.angle - segment.p1.angle;\r\n            if (deltaAngle <= -Math.PI) deltaAngle += 2 * Math.PI;\r\n            if (deltaAngle > Math.PI) deltaAngle -= 2 * Math.PI;\r\n            segment.p1.begin = deltaAngle > 0;\r\n            segment.p2.begin = !segment.p1.begin;\r\n        }\r\n    }\r\n\r\n    sweep(maxAngle = Number.POSITIVE_INFINITY): void {\r\n        this.output = [];\r\n        this.intersectionsDetected = [];\r\n        this.endpoints.sort(Visibility.compareEndpoints);\r\n        this.openSegments = [];\r\n        let startAngle = 0;\r\n\r\n        for (let pass = 0; pass < 2; pass++) {\r\n            for (const point of this.endpoints) {\r\n                if (pass === 1 && point.angle > maxAngle) break;\r\n                const previous = this.openSegments[0] || null;\r\n                if (point.begin) {\r\n                    const seg = point.segment!;\r\n                    const insertAt = this.openSegments.findIndex(other =>\r\n                        !this.segmentInFrontOf(seg, other, this.center)\r\n                    );\r\n                    if (insertAt === -1) {\r\n                        this.openSegments.push(seg);\r\n                    } else {\r\n                        this.openSegments.splice(insertAt, 0, seg);\r\n                    }\r\n                } else {\r\n                    const index = this.openSegments.indexOf(point.segment!);\r\n                    if (index >= 0) this.openSegments.splice(index, 1);\r\n                }\r\n                const current = this.openSegments[0] || null;\r\n                if (previous !== current) {\r\n                    if (pass === 1) {\r\n                        this.emitTriangle(startAngle, point.angle, previous);\r\n                    }\r\n                    startAngle = point.angle;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.outputPolygon = new Polygon(this.output);\r\n    }\r\n\r\n    getClippedPolygon(fovRays: Line[]): Polygon {\r\n        const fullFan = this.output;\r\n        type Hit = { index: number; point: Vector2; ray: 0 | 1 };\r\n        const hits: Hit[] = [];\r\n\r\n        for (let rayIdx = 0; rayIdx < 2; rayIdx++) {\r\n            const ray = fovRays[rayIdx];\r\n            for (let i = 0; i < fullFan.length; i++) {\r\n                const A = fullFan[i];\r\n                const B = fullFan[(i + 1) % fullFan.length];\r\n                const inter = linesIntersect(ray, new Line(A, B));\r\n                if (inter?.cross) {\r\n                    hits.push({ index: i, point: inter.position.clone(), ray: rayIdx as 0 | 1 });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const leftHit = hits.find(h => h.ray === 0);\r\n        const rightHit = hits.find(h => h.ray === 1);\r\n\r\n        let wedge: Vector2[];\r\n\r\n        if (!leftHit || !rightHit) {\r\n            wedge = [];\r\n        } else if (leftHit.index === rightHit.index) {\r\n            wedge = [leftHit.point, rightHit.point];\r\n        } else {\r\n            let middle: Vector2[];\r\n            if (leftHit.index < rightHit.index) {\r\n                middle = fullFan.slice(leftHit.index + 1, rightHit.index + 1).map(p => p.clone());\r\n            } else {\r\n                middle = [\r\n                    ...fullFan.slice(leftHit.index + 1).map(p => p.clone()),\r\n                    ...fullFan.slice(0, rightHit.index + 1).map(p => p.clone())\r\n                ];\r\n            }\r\n            wedge = [leftHit.point, ...middle, rightHit.point];\r\n        }\r\n\r\n        wedge.unshift(this.center.clone());\r\n        return new Polygon(wedge);\r\n    }\r\n\r\n    private emitTriangle(startAngle: number, endAngle: number, seg: Segment | null) {\r\n        const origin = this.center.clone();\r\n        const dir1 = new Vector2(\r\n            origin.x + Math.cos(startAngle),\r\n            origin.y + Math.sin(startAngle)\r\n        );\r\n\r\n        let edgeA: Vector2, edgeB: Vector2;\r\n        if (seg) {\r\n            edgeA = new Vector2(seg.p1.x, seg.p1.y);\r\n            edgeB = new Vector2(seg.p2.x, seg.p2.y);\r\n        } else {\r\n            const far1 = Vector2.fromAngle(startAngle).mulScalar(10000);\r\n            const far2 = Vector2.fromAngle(endAngle).mulScalar(10000);\r\n            edgeA = origin.clone().add(far1);\r\n            edgeB = origin.clone().add(far2);\r\n        }\r\n\r\n        const hit1 = Visibility.lineIntersection(edgeA, edgeB, origin, dir1);\r\n        const dir2 = new Vector2(\r\n            this.center.x + Math.cos(endAngle),\r\n            this.center.y + Math.sin(endAngle)\r\n        );\r\n        const hit2 = Visibility.lineIntersection(edgeA, edgeB, origin, dir2);\r\n\r\n        this.output.push(hit1, hit2);\r\n    }\r\n\r\n    private segmentInFrontOf(a: Segment, b: Segment, observer: Vector2): boolean {\r\n        const epsilon = 0.01;\r\n        const A1 = Visibility.leftOf(a, Visibility.interpolate(b.p1, b.p2, epsilon));\r\n        const A2 = Visibility.leftOf(a, Visibility.interpolate(b.p2, b.p1, epsilon));\r\n        const A3 = Visibility.leftOf(a, observer);\r\n        const B1 = Visibility.leftOf(b, Visibility.interpolate(a.p1, a.p2, epsilon));\r\n        const B2 = Visibility.leftOf(b, Visibility.interpolate(a.p2, a.p1, epsilon));\r\n        const B3 = Visibility.leftOf(b, observer);\r\n        if (B1 === B2 && B2 !== B3) return true;\r\n        if (A1 === A2 && A2 === A3) return true;\r\n        if (A1 === A2 && A2 !== A3) return false;\r\n        if (B1 === B2 && B2 === B3) return false;\r\n        this.intersectionsDetected.push([a.p1, a.p2, b.p1, b.p2]);\r\n        return false;\r\n    }\r\n\r\n    private static compareEndpoints(a: EndPoint, b: EndPoint): number {\r\n        if (a.angle > b.angle) return 1;\r\n        if (a.angle < b.angle) return -1;\r\n        if (!a.begin && b.begin) return 1;\r\n        if (a.begin && !b.begin) return -1;\r\n        return 0;\r\n    }\r\n\r\n    private static leftOf(s: Segment, p: Vector2): boolean {\r\n        const crossValue = (\r\n            (s.p2.x - s.p1.x) * (p.y - s.p1.y) -\r\n            (s.p2.y - s.p1.y) * (p.x - s.p1.x)\r\n        );\r\n\r\n        return crossValue < 0;\r\n    }\r\n\r\n    private static interpolate(p: Vector2, q: Vector2, f: number): Vector2 {\r\n        return new Vector2(\r\n            p.x * (1 - f) + q.x * f,\r\n            p.y * (1 - f) + q.y * f\r\n        );\r\n    }\r\n\r\n    private static lineIntersection(\r\n        line1Start: Vector2,\r\n        line1End: Vector2,\r\n        line2Start: Vector2,\r\n        line2End: Vector2\r\n    ): Vector2 {\r\n        const intersectionFraction = (\r\n            (\r\n                (line2End.x - line2Start.x) * (line1Start.y - line2Start.y) -\r\n                (line2End.y - line2Start.y) * (line1Start.x - line2Start.x)\r\n            ) /\r\n            (\r\n                (line2End.y - line2Start.y) * (line1End.x - line1Start.x) -\r\n                (line2End.x - line2Start.x) * (line1End.y - line1Start.y)\r\n            )\r\n        );\r\n\r\n        return new Vector2(\r\n            line1Start.x + intersectionFraction * (line1End.x - line1Start.x),\r\n            line1Start.y + intersectionFraction * (line1End.y - line1Start.y)\r\n        );\r\n    }\r\n}\r\n","import { Vector2 } from './Vector2';\r\n\r\nexport class Polygon {\r\n    points: Vector2[];\r\n\r\n    constructor(points: Vector2[]) {\r\n        this.points = points;\r\n    }\r\n}","import { angleBetween, deg2rad } from '../math/utils';\r\nimport { Vector2 } from '../math/Vector2';\r\n\r\nexport class Player {\r\n    position = new Vector2(0, 0);\r\n    velocity = new Vector2(0, 0);\r\n    speed = 0.0075;\r\n    friction = 0.875;\r\n    angle = 0;\r\n    angleVelocity = 0;\r\n    cameraSpeed = 0.0075;\r\n    cameraFriction = 0.875;\r\n    fovDegrees = 65;\r\n    fov = deg2rad(this.fovDegrees);\r\n\r\n    constructor(position: Vector2) {\r\n        this.position = position;\r\n    }\r\n\r\n    lookAt(position: Vector2) {\r\n        this.angle = angleBetween(this.position, position);\r\n    }\r\n}","import { Cursor } from '../inputs/Cursor';\r\nimport { Keyboard } from '../inputs/Keyboard';\r\nimport { Level } from '../Level';\r\nimport { Rect } from '../math/Rect';\r\nimport { clamp, deg2rad, rectsIntersect } from '../math/utils';\r\nimport { Vector2 } from '../math/Vector2';\r\nimport { LevelRenderer } from '../rendering/LevelRenderer';\r\nimport { Player } from './Player';\r\n\r\nexport class PlayerController {\r\n    player: Player;\r\n    keyboard: Keyboard;\r\n    cursor: Cursor;\r\n    levelRenderer: LevelRenderer;\r\n    level: Level;\r\n    disableMouseCamera = true;\r\n\r\n    constructor(player: Player, keyboard: Keyboard, cursor: Cursor, levelRenderer: LevelRenderer) {\r\n        this.player = player;\r\n        this.keyboard = keyboard;\r\n        this.cursor = cursor;\r\n        this.levelRenderer = levelRenderer;\r\n        this.level = levelRenderer.level;\r\n\r\n        this.cursor.onMouseMove = () => this.onCursorMove();\r\n        this.cursor.onMouseWheel = (event) => this.onMouseWheel(event);\r\n    }\r\n\r\n    update() {\r\n        // this.useSimpleController();\r\n        this.useComplexController();\r\n    }\r\n\r\n    useSimpleController() {\r\n        const { player, keyboard } = this;\r\n        const movement = new Vector2(0, 0);\r\n\r\n        if (keyboard.isKeyDown('W')) movement.y -= 1;\r\n        if (keyboard.isKeyDown('S')) movement.y += 1;\r\n        if (keyboard.isKeyDown('A')) movement.x -= 1;\r\n        if (keyboard.isKeyDown('D')) movement.x += 1;\r\n\r\n        movement.normalize().mulScalar(player.speed);\r\n\r\n        player.velocity.add(movement);\r\n        player.position.add(player.velocity);\r\n        player.velocity.mulScalar(player.friction);\r\n\r\n        this.onCursorMove();\r\n\r\n        this.handleCollisions();\r\n    }\r\n\r\n    useComplexController() {\r\n        const { player, keyboard } = this;\r\n        const movement = new Vector2(0, 0);\r\n        const forward = Vector2.fromAngle(player.angle);\r\n\r\n        if (keyboard.isKeyDown('W')) movement.add(forward);\r\n        if (keyboard.isKeyDown('S')) movement.add(Vector2.mulScalar(forward, -1));\r\n\r\n        if (keyboard.isKeyDown('A')) player.angleVelocity -= player.cameraSpeed;\r\n        if (keyboard.isKeyDown('D')) player.angleVelocity += player.cameraSpeed;\r\n\r\n        if (movement.x !== 0 || movement.y !== 0) {\r\n            movement.normalize().mulScalar(player.speed);\r\n            player.velocity.add(movement);\r\n        }\r\n\r\n        player.position.add(player.velocity);\r\n        player.velocity.mulScalar(player.friction);\r\n\r\n        player.angle += player.angleVelocity;\r\n        player.angleVelocity *= player.cameraFriction;\r\n\r\n        this.handleCollisions();\r\n    }\r\n\r\n    handleCollisions() {\r\n        const { player, level } = this;\r\n        const playerSize = 0.65;\r\n        const playerRect = new Rect(player.position, new Vector2(playerSize, playerSize));\r\n        const levelRects = level.rects;\r\n\r\n        for (const levelRect of levelRects) {\r\n            const intersects = rectsIntersect(playerRect, levelRect);\r\n\r\n            if (intersects) this.handleCollision(playerRect, levelRect);\r\n        }\r\n    }\r\n\r\n    handleCollision(playerRect: Rect, levelRect: Rect) {\r\n        const { player } = this;\r\n\r\n        const pw = playerRect.size.x;\r\n        const ph = playerRect.size.y;\r\n        const px = playerRect.position.x - pw / 2;\r\n        const py = playerRect.position.y - ph / 2;\r\n\r\n        const lw = levelRect.size.x;\r\n        const lh = levelRect.size.y;\r\n        const lx = levelRect.position.x - lw / 2;\r\n        const ly = levelRect.position.y - lh / 2;\r\n\r\n        const overlapX = Math.min(px + pw, lx + lw) - Math.max(px, lx);\r\n        const overlapY = Math.min(py + ph, ly + lh) - Math.max(py, ly);\r\n\r\n        if (overlapX < overlapY) {\r\n            if (px < lx) {\r\n                player.position.x -= overlapX;\r\n            } else {\r\n                player.position.x += overlapX;\r\n            }\r\n\r\n            player.velocity.x = 0;\r\n        } else {\r\n            if (py < ly) {\r\n                player.position.y -= overlapY;\r\n            } else {\r\n                player.position.y += overlapY;\r\n            }\r\n\r\n            player.velocity.y = 0;\r\n        }\r\n    }\r\n\r\n    onCursorMove() {\r\n        if (this.disableMouseCamera) return;\r\n\r\n        const { player, cursor, levelRenderer } = this;\r\n        const cursorCellPosition = levelRenderer.cellPositionAt(cursor.position);\r\n        player.lookAt(cursorCellPosition);\r\n    }\r\n\r\n    onMouseWheel(event: WheelEvent) {\r\n        if (event.ctrlKey) return;\r\n\r\n        event.preventDefault();\r\n\r\n        const delta = event.deltaY > 0 ? -1 : 1;\r\n\r\n        this.player.fovDegrees += delta;\r\n        this.player.fovDegrees = clamp(this.player.fovDegrees, 0 + 1, 180 - 1);\r\n        this.player.fov = deg2rad(this.player.fovDegrees);\r\n    }\r\n}","import { colors } from '../config';\r\nimport { Cell, Level } from '../Level';\r\nimport { Line } from '../math/Line';\r\nimport { Polygon } from '../math/Polygon';\r\nimport { Rect } from '../math/Rect';\r\nimport { angleBetween, distanceBetween, linesIntersect, normalizeAngle, pointInRect, rect2lines, rect2points } from '../math/utils';\r\nimport { Vector2 } from '../math/Vector2';\r\nimport { Visibility } from '../math/Visibility';\r\nimport { Player } from '../player/Player';\r\nimport { Renderer } from './base/Renderer';\r\n\r\ntype RenderViewCallback = () => void;\r\n\r\ntype CellUserData = {\r\n    rect: Rect;\r\n    points: Vector2[];\r\n    lines: Line[];\r\n    pointsInFov: Vector2[];\r\n    insideFov: boolean;\r\n}\r\n\r\nexport class LevelRenderer extends Renderer {\r\n    level: Level;\r\n    player: Player;\r\n    visibility: Visibility;\r\n    blockSize = 0;\r\n    viewCount = 2;\r\n    fovRaysLength = 10000;\r\n    renderGrid = false;\r\n    fovLines: Line[] = [];\r\n    centerFovLine = new Line(new Vector2(0, 0), new Vector2(0, 0));\r\n    centerIntersection = new Vector2(0, 0);\r\n    fovPolygon = new Polygon([]);\r\n    levelHalfSize = new Vector2(0, 0);\r\n    offset = new Vector2(0, 0);\r\n    viewSize = new Vector2(0, 0);\r\n\r\n    constructor(level: Level, player: Player, visibility: Visibility) {\r\n        super();\r\n\r\n        this.level = level;\r\n        this.player = player;\r\n        this.visibility = visibility;\r\n\r\n        this.init();\r\n        this.update();\r\n        this.onResize();\r\n    }\r\n\r\n    onResize() {\r\n        if (!this.visibility) return;\r\n\r\n        this.updateProperties();\r\n\r\n        const position = this.cellPositionAt(new Vector2(0, 0));\r\n        const size = this.size.clone().divScalar(this.blockSize);\r\n\r\n        this.visibility.setBounds(position, size);\r\n    }\r\n\r\n    init() {\r\n        this.levelHalfSize = Vector2.divScalar(this.level.size, 2);\r\n        this.offset = Vector2.mulScalar(this.levelHalfSize, -1).addScalar(0.5);\r\n        this.visibility.loadMap(this.level.rects);\r\n\r\n        this.level.forEach((cell) => {\r\n            const { position } = cell;\r\n            const rect = new Rect(position, new Vector2(1, 1));\r\n            const points = rect2points(rect);\r\n            const lines = rect2lines(rect);\r\n\r\n            cell.userData = {\r\n                rect,\r\n                points,\r\n                lines,\r\n                pointsInFov: [],\r\n                insideFov: false\r\n            } satisfies CellUserData;\r\n        });\r\n    }\r\n\r\n    updateProperties() {\r\n        const { size, viewCount, level } = this;\r\n\r\n        this.viewSize = new Vector2(size.x / viewCount, size.y);\r\n        this.blockSize = Vector2.div(this.viewSize, level.size).min();\r\n    }\r\n\r\n    updateFovTriangle() {\r\n        const { fovRaysLength, player } = this;\r\n\r\n        const getFovPoint = (angle: number) => Vector2\r\n            .fromAngle(player.angle + angle)\r\n            .mulScalar(fovRaysLength)\r\n            .add(player.position);\r\n\r\n        const halfFov = player.fov / 2;\r\n        const point1 = getFovPoint(-halfFov);\r\n        const point2 = getFovPoint(halfFov);\r\n\r\n        this.fovLines = [\r\n            new Line(player.position, point1),\r\n            new Line(player.position, point2)\r\n        ];\r\n\r\n        this.centerFovLine = new Line(\r\n            player.position,\r\n            Vector2.fromAngle(player.angle).mulScalar(fovRaysLength).add(player.position)\r\n        );\r\n\r\n        let closestIntersection: Vector2 | null = null;\r\n        let closestDistance = Infinity;\r\n\r\n        for (const line of this.level.lines) {\r\n            const intersection = linesIntersect(this.centerFovLine, line);\r\n\r\n            if (intersection?.cross) {\r\n                const distance = distanceBetween(player.position, intersection.position);\r\n\r\n                if (distance < closestDistance) {\r\n                    closestDistance = distance;\r\n                    closestIntersection = intersection.position;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.centerIntersection = closestIntersection ?? this.centerFovLine.p2;\r\n    }\r\n\r\n    isPointInFov(point: Vector2) {\r\n        let angle = angleBetween(this.player.position, point);\r\n\r\n        angle = normalizeAngle(angle - this.player.angle);\r\n\r\n        const halfFov = this.player.fov / 2;\r\n\r\n        return Math.abs(angle) <= halfFov;\r\n    }\r\n\r\n    isCellInFov(cell: Cell) {\r\n        const { rect, points } = cell.userData as CellUserData;\r\n\r\n        return (\r\n            pointInRect(this.player.position, rect) ||\r\n            points.some((point) => this.isPointInFov(point))\r\n        );\r\n    }\r\n\r\n    updateCell(cell: Cell) {\r\n        cell.userData.insideFov = this.isCellInFov(cell);\r\n    }\r\n\r\n    update() {\r\n        this.updateProperties();\r\n        this.updateFovTriangle();\r\n\r\n        this.level.forEach((cell) => {\r\n            this.updateCell(cell);\r\n        });\r\n\r\n        this.fovPolygon = this.visibility.getClippedPolygon(this.fovLines);\r\n    }\r\n\r\n    render() {\r\n        this.ctx.clear();\r\n\r\n        this.renderView(() => this.render2DView(), 0);\r\n        this.renderView(() => this.render3DView(), 1);\r\n    }\r\n\r\n    getViewCenter(viewIndex: number) {\r\n        const viewCenter = Vector2.divScalar(this.viewSize, 2);\r\n\r\n        viewCenter.x += viewIndex * this.viewSize.x;\r\n\r\n        return viewCenter;\r\n    }\r\n\r\n    cellPositionAt(position: Vector2) {\r\n        const viewCenter = this.getViewCenter(0);\r\n\r\n        return Vector2\r\n            .sub(position, viewCenter)\r\n            .divScalar(this.blockSize)\r\n            .add(this.levelHalfSize)\r\n            .subScalar(0.5);\r\n    }\r\n\r\n    renderView(callback: RenderViewCallback, viewIndex: number) {\r\n        const viewCenter = this.getViewCenter(viewIndex);\r\n\r\n        this.ctx.save();\r\n        this.ctx.translate(viewCenter);\r\n\r\n        callback();\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    render2DView() {\r\n        const { ctx, blockSize, offset, level, player } = this;\r\n\r\n        ctx.scale(new Vector2(blockSize, blockSize));\r\n        ctx.translate(offset);\r\n\r\n        if (this.renderGrid) {\r\n            level.forEach((cell) => {\r\n                const { char, position } = cell;\r\n                const { insideFov } = cell.userData as CellUserData;\r\n\r\n                ctx.globalAlpha = insideFov ? 1 : 0.25;\r\n\r\n                ctx.fillStyle = colors.characters[char] || 'white';\r\n                ctx.font = `1px Arial`;\r\n                ctx.fillText(char, position);\r\n\r\n                ctx.globalAlpha = 1;\r\n            });\r\n        }\r\n\r\n        ctx.fillStyle = colors.player;\r\n        ctx.fillCircle(player.position, 0.25);\r\n\r\n        ctx.lineWidth = 0.075;\r\n        ctx.lineCap = 'round';\r\n        ctx.lineJoin = 'round';\r\n\r\n        ctx.strokeStyle = 'white';\r\n        ctx.strokePolygon(this.visibility.outputPolygon);\r\n\r\n        ctx.strokeStyle = 'yellow';\r\n        ctx.strokePolygon(this.fovPolygon);\r\n    }\r\n\r\n    render3DView() {\r\n        const { ctx } = this;\r\n\r\n        ctx.fillStyle = '#101010';\r\n        ctx.fillRect(new Rect(new Vector2(0, 0), this.viewSize));\r\n\r\n        const wallPoints: { x: number, height: number, brightness: number }[] = [];\r\n        const fovPoints = this.fovPolygon.points.slice(1);\r\n        const maxHeight = this.size.y;\r\n\r\n        const halfFov = this.player.fov / 2;\r\n\r\n        const normalizeAngleUnit = (angle: number) => {\r\n            return (normalizeAngle(angle - this.player.angle) + halfFov) / this.player.fov;\r\n        };\r\n\r\n        const minAngle = normalizeAngleUnit(this.player.angle - halfFov);\r\n        const maxAngle = normalizeAngleUnit(this.player.angle + halfFov);\r\n\r\n        for (let i = 0; i < fovPoints.length; i++) {\r\n            const point = fovPoints[i];\r\n            const angle = angleBetween(this.player.position, point);\r\n            const normalizedAngle = normalizeAngleUnit(angle);\r\n            const cos = Math.cos((angle - this.player.angle));\r\n            const distance = distanceBetween(this.player.position, point) * cos;\r\n            const height = maxHeight / distance;\r\n            const percentage = (normalizedAngle - minAngle) / (maxAngle - minAngle);\r\n            const x = this.viewSize.x * percentage - this.viewSize.x / 2;\r\n            const brightness = height / maxHeight;\r\n\r\n            wallPoints.push({ x, height, brightness });\r\n        }\r\n\r\n        for (let i = 0; i < wallPoints.length; i++) {\r\n            const currPoint = wallPoints[i];\r\n            const nextPoint = wallPoints[i + 1];\r\n\r\n            if (!nextPoint) break;\r\n\r\n            const x1 = currPoint.x;\r\n            const x2 = nextPoint.x;\r\n            const h1 = currPoint.height;\r\n            const h2 = nextPoint.height;\r\n            const b1 = currPoint.brightness;\r\n            const b2 = nextPoint.brightness;\r\n\r\n            const polygon = new Polygon([\r\n                new Vector2(x1, -h1 / 2),\r\n                new Vector2(x1, +h1 / 2),\r\n\r\n                new Vector2(x2, +h2 / 2),\r\n                new Vector2(x2, -h2 / 2)\r\n            ]);\r\n\r\n            const gradient = ctx.createLinearGradient(\r\n                new Line(\r\n                    new Vector2(x1, 0),\r\n                    new Vector2(x2, 0)\r\n                )\r\n            );\r\n\r\n            const wallRgb = [ 200, 200, 200 ];\r\n            const wallRgbStr = wallRgb.join(', ');\r\n\r\n            gradient.addColorStop(0, `rgba(${wallRgbStr}, ${b1})`);\r\n            gradient.addColorStop(1, `rgba(${wallRgbStr}, ${b2})`);\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fillPolygon(polygon);\r\n\r\n            ctx.strokeStyle = 'black';\r\n            ctx.lineWidth = window.innerWidth / 1000;\r\n            ctx.strokePolygon(polygon);\r\n        }\r\n    }\r\n}","import { Vector2 } from '../../math/Vector2';\r\nimport { RendererCtx } from './RendererCtx';\r\n\r\nexport class Renderer {\r\n    canvas: HTMLCanvasElement;\r\n    ctx: RendererCtx;\r\n    size = new Vector2(0, 0);\r\n\r\n    constructor() {\r\n        this.canvas = document.querySelector('canvas')!;\r\n        this.ctx = new RendererCtx(this.canvas);\r\n\r\n        this.resize();\r\n\r\n        window.addEventListener('resize', () => {\r\n            this.resize();\r\n        });\r\n    }\r\n\r\n    resize(w = window.innerWidth, h = window.innerHeight) {\r\n        this.canvas.width = w;\r\n        this.canvas.height = h;\r\n        this.size.set(w, h);\r\n        this.onResize();\r\n    }\r\n\r\n    onResize() { }\r\n}","import { Line } from '../../math/Line';\r\nimport { Polygon } from '../../math/Polygon';\r\nimport { Rect } from '../../math/Rect';\r\nimport { Vector2 } from '../../math/Vector2';\r\n\r\nexport class RendererCtx {\r\n    ctx: CanvasRenderingContext2D;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext('2d')!;\r\n    }\r\n\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    fillRect(rect: Rect) {\r\n        const { position, size } = rect;\r\n        const halfSize = Vector2.divScalar(size, 2);\r\n\r\n        this.ctx.fillRect(\r\n            position.x - halfSize.x,\r\n            position.y - halfSize.y,\r\n            size.x,\r\n            size.y\r\n        );\r\n    }\r\n\r\n    fillText(text: string, position: Vector2) {\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText(text, position.x, position.y);\r\n    }\r\n\r\n    fillCircle(position: Vector2, radius: number) {\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(position.x, position.y, radius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    strokeLine(line: Line) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(line.p1.x, line.p1.y);\r\n        this.ctx.lineTo(line.p2.x, line.p2.y);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawPolygon(polygon: Polygon, mode: 'fill' | 'stroke') {\r\n        const { points } = polygon;\r\n        const firstPoint = points[0];\r\n\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(firstPoint.x, firstPoint.y);\r\n\r\n        for (let i = 1; i < points.length; i++) {\r\n            const point = points[i];\r\n            this.ctx.lineTo(point.x, point.y);\r\n        }\r\n\r\n        this.ctx.lineTo(firstPoint.x, firstPoint.y);\r\n        this.ctx[mode]();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    strokePolygon(polygon: Polygon) {\r\n        this.drawPolygon(polygon, 'stroke');\r\n    }\r\n\r\n    fillPolygon(polygon: Polygon) {\r\n        this.drawPolygon(polygon, 'fill');\r\n    }\r\n\r\n    createLinearGradient(line: Line) {\r\n        return this.ctx.createLinearGradient(\r\n            line.p1.x,\r\n            line.p1.y,\r\n            line.p2.x,\r\n            line.p2.y\r\n        );\r\n    }\r\n\r\n    translate(position: Vector2) {\r\n        this.ctx.translate(position.x, position.y);\r\n    }\r\n\r\n    scale(scale: Vector2) {\r\n        this.ctx.scale(scale.x, scale.y);\r\n    }\r\n\r\n    save() {\r\n        this.ctx.save();\r\n    }\r\n\r\n    restore() {\r\n        this.ctx.restore();\r\n    }\r\n\r\n    set fillStyle(value: string | CanvasGradient | CanvasPattern) { this.ctx.fillStyle = value };\r\n    set strokeStyle(value: string) { this.ctx.strokeStyle = value; }\r\n    set lineWidth(value: number) { this.ctx.lineWidth = value; }\r\n    set lineCap(value: CanvasLineCap) { this.ctx.lineCap = value; }\r\n    set lineJoin(value: CanvasLineJoin) { this.ctx.lineJoin = value; }\r\n    set font(value: string) { this.ctx.font = value; }\r\n    set globalAlpha(value: number) { this.ctx.globalAlpha = value; }\r\n}"],"names":["$90c710c7d5aa6658$export$c79fc6492f3af13d","constructor","position","size","userData","$b1c52281d4eed456$export$c977b3e384af9ae1","x","y","set","equals","v","clone","min","Math","max","fn","fromAngle","angle","cos","sin","magnitude","sqrt","length","dot","normalize","a","add","b","addScalar","s","sub","subScalar","mul","mulScalar","div","divScalar","$5ff6a2ea679a026f$var$MaxHeap","comparator","data","push","item","index","parentIndex","pop","top","last","left","right","largest","$5ff6a2ea679a026f$var$compareArea","$5ff6a2ea679a026f$var$genericKey","components","join","$5ff6a2ea679a026f$var$rectKey","rect","$a3b594b1af91c51e$export$17d680238e50603e","p1","p2","$d78f250177f3f870$export$b1b275608b2b1b8","deg","PI","$d78f250177f3f870$export$5082664ed3e64ee8","hypot","$d78f250177f3f870$export$47cb7eb79666608a","atan2","$d78f250177f3f870$export$7d15b64cf5a3a4c4","value","$d78f250177f3f870$export$e3df76cf4464bc81","theta","$d78f250177f3f870$export$f9d463325d36ce37","l1","l2","x1","y1","x2","y2","x3","y3","x4","y4","dx1","dy1","dx2","dy2","denom","dx13","dy13","ua","ub","cross","$d78f250177f3f870$export$6295e450519f928d","halfSize","$d78f250177f3f870$export$961147ea8c83e176","points","$d78f250177f3f870$export$fce123c48a7b4eae","width","height","fill","grid","Array","i","$36888477c1b74358$export$f6f0c3fe4ec306ea","char","$36888477c1b74358$export$ca664994d1d54bff","fromString","levelString","rows","trim","split","level","row","cell","bake","rects","lines","cells","matrix","rowCount","colCount","usedMask","Uint8Array","heap","seen","Set","$5ff6a2ea679a026f$var$buildInitialRectangles","runLength","col","stackItems","currentMaxWidth","widthAtRow","startRow","prevWidth","w","key","has","result","delete","$5ff6a2ea679a026f$var$isEdgesClear","x0","y0","dx","topIndex","bottomIndex","dy","leftIndex","rightIndex","$5ff6a2ea679a026f$var$markRectangle","baseIndex","$5ff6a2ea679a026f$var$spawnChildren","childW","keyW","childH","keyH","get","forEach","callback","ignoreEmpty","stop","find","character","$9d936a2aecb96285$export$3c2d24a8ea6992f9","$9d936a2aecb96285$export$8f45430ccf837300","characters","player","$361c27d9ec34e012$export$b6a79797ad180576","isDown","ctrl","AbortController","setupEvents","signal","document","addEventListener","event","clientX","clientY","onMouseMove","onMouseDown","onMouseUp","onMouseClick","onMouseWheel","destroy","abort","$bc480dbcff87c0d9$export$16e4d70cc375e707","options","pressedKeys","ignoreCase","getKey","toUpperCase","isKeyDown","onKeyDown","onKeyUp","$3507c17b1074d59c$export$7d31b617c820d435","$56210ab632d05b2f$var$EndPoint","begin","segment","visualize","$56210ab632d05b2f$var$Segment","distanceSquared","$56210ab632d05b2f$export$5afe92775e3e701d","segments","endpoints","openSegments","center","output","outputPolygon","intersectionsDetected","update","setLightLocation","sweep","loadMap","edge","addSegment","line","end1","end2","setBounds","isBound","filter","e","midX","midY","deltaAngle","maxAngle","Number","POSITIVE_INFINITY","sort","compareEndpoints","startAngle","pass","point","previous","seg","insertAt","findIndex","other","segmentInFrontOf","splice","indexOf","emitTriangle","getClippedPolygon","fovRays","wedge","fullFan","hits","rayIdx","ray","inter","leftHit","h","rightHit","middle","slice","map","p","unshift","endAngle","edgeA","edgeB","origin","dir1","far1","far2","hit1","lineIntersection","dir2","hit2","observer","A1","leftOf","interpolate","A2","A3","B1","B2","B3","crossValue","q","f","line1Start","line1End","line2Start","line2End","intersectionFraction","$da2fd7912630ee09$export$2616165974278734","velocity","speed","friction","angleVelocity","cameraSpeed","cameraFriction","fovDegrees","fov","lookAt","$d4c9f062fc6eae44$export$cbacd6dcfff5ae2e","keyboard","cursor","levelRenderer","disableMouseCamera","onCursorMove","useComplexController","useSimpleController","movement","handleCollisions","forward","playerRect","levelRect","intersects","r1","r2","s1","s2","handleCollision","pw","ph","px","py","lw","lh","lx","ly","overlapX","overlapY","cursorCellPosition","cellPositionAt","ctrlKey","preventDefault","delta","deltaY","$d2119310ebf03276$export$a0bdfbc14a3adba0","canvas","ctx","getContext","clear","clearRect","fillRect","fillText","text","textAlign","textBaseline","fillCircle","radius","beginPath","arc","closePath","strokeLine","moveTo","lineTo","stroke","drawPolygon","polygon","mode","firstPoint","strokePolygon","fillPolygon","createLinearGradient","translate","scale","save","restore","fillStyle","strokeStyle","lineWidth","lineCap","lineJoin","font","globalAlpha","$246be329c647ef23$export$88530751e3977073","querySelector","resize","window","innerWidth","innerHeight","onResize","$c862d2503fd74177$export$666890657dd2cc88","visibility","blockSize","viewCount","fovRaysLength","renderGrid","fovLines","centerFovLine","centerIntersection","fovPolygon","levelHalfSize","offset","viewSize","init","updateProperties","pointsInFov","insideFov","updateFovTriangle","getFovPoint","halfFov","point1","point2","closestIntersection","closestDistance","Infinity","intersection","distance","isPointInFov","abs","isCellInFov","some","updateCell","render","renderView","render2DView","render3DView","getViewCenter","viewIndex","viewCenter","wallPoints","fovPoints","maxHeight","normalizeAngleUnit","minAngle","normalizedAngle","percentage","brightness","currPoint","nextPoint","h1","h2","b1","b2","gradient","wallRgbStr","wallRgb","addColorStop","$ad2bcec7a0192558$var$main","closeInfoBtn","infoOverlay","closest","classList","spawn","playerCtrl","performance","now","accumulator","step","requestAnimationFrame","Object","assign"],"version":3,"file":"2d-raycaster.b97e1aa9.js.map"}