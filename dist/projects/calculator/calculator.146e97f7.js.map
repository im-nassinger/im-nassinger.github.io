{"mappings":"A,S,e,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,e,W,gB,C,E,c,C,E,c,e,iB,A,O,gB,A,C,c,S,C,E,G,K,gB,O,e,C,E,C,O,C,G,K,c,C,I,E,a,C,E,A,Q,a,C,E,C,I,E,C,G,E,Q,C,C,E,O,e,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,a,C,E,C,C,E,e,iB,C,e,I,e,c,Q,C,e,Q,S,M,C,O,ECEO,SAAS,KACZ,CAAgB,CAChB,EAAoC,QAAQ,EAE5C,OAAO,EAAU,aAAa,CAAI,EACtC,CAEO,SAAS,QACZ,CAAgB,CAChB,EAAoC,QAAQ,EAE5C,MAAO,IAAI,EAAU,gBAAgB,CAAI,GAAU,AACvD,C,e,O,O,C,O,I,M,e,O,O,C,U,I,S,e,O,O,C,Q,I,O,e,O,O,C,a,I,Y,e,O,O,C,W,I,UAEO,IAAM,MAAQ,CAAC,EAAe,EAAa,IAC9C,AAAI,EAAQ,EAAY,EACpB,EAAQ,EAAY,EACjB,EAGE,cAAgB,AAAC,IAC1B,IAAM,EAAa,EAAQ,UAAU,CAAC,MAAM,CAAC,QAExC,CAAA,EAAW,MAAM,EAEtB,CAAA,EAAQ,MAAM,CACV,EAAQ,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,GACjC,EAAQ,OAAO,CAAC,SAAS,CAAC,MAAM,IAAI,EAFxC,CAGJ,EAEa,WAAa,AAAC,GAChB,cAAc,CAAE,GAAG,CAAO,CAAE,OAAQ,CAAA,CAAK,GAGvC,cAAgB,AAAC,GACnB,cAAc,CAAE,GAAG,CAAO,CAAE,OAAQ,CAAA,CAAM,GAGxC,WAAa,AAAC,IACvB,EAAQ,OAAO,CAAC,SAAS,CAAG,GACrB,cAAc,CAAE,GAAG,CAAO,CAAE,OAAQ,CAAA,CAAK,IAK7C,SAAS,SAAS,UAAkB,EACvC,IAAM,QAAU,qBAEhB,GAAI,CAAC,QAAQ,IAAI,CAAC,YACd,MAAM,AAAI,MAAM,oCAGpB,GAAI,CACA,OAAO,KAAK,WAChB,CAAE,MAAO,MAAO,CACZ,MAAM,AAAI,MAAM,qBACpB,CACJ,CAEO,SAAS,YACZ,CAA+B,CAC/B,CAA6D,EAE7D,OACI,EAAM,CAAC,EAAI,EAAK,CAAC,EACjB,EAAM,CAAC,EAAI,EAAK,CAAC,CAAG,EAAK,KAAK,EAC9B,EAAM,CAAC,EAAI,EAAK,CAAC,EACjB,EAAM,CAAC,EAAI,EAAK,CAAC,CAAG,EAAK,MAAM,AAEvC,C,G,I,O,c,QCpEA,OAAM,iC,M,CACK,IAAA,CAAA,OAAA,CAAU,CAAC,QAAS,YAAa,IAAK,KAAM,IAAI,A,C,AAYvD,YAAY,EAAW,aAAa,CAAE,CAHtC,IAAA,CAAA,UAAA,CAAa,IAAI,IACjB,IAAA,CAAA,IAAA,CAAO,IAAI,gBAGP,IAAI,CAAC,OAAO,CAAG,AAAA,CAAA,EAAA,OAAA,IAAG,AAAH,EAAK,GAEpB,IAAI,CAAC,cAAc,CAAG,AAAA,CAAA,EAAA,OAAA,IAAG,AAAH,EAAK,WAAY,IAAI,CAAC,OAAO,EACnD,IAAI,CAAC,eAAe,CAAG,AAAA,CAAA,EAAA,OAAA,IAAG,AAAH,EAAK,YAAa,IAAI,CAAC,OAAO,EACrD,IAAI,CAAC,aAAa,CAAG,AAAA,CAAA,EAAA,OAAA,IAAG,AAAH,EAAK,UAAW,IAAI,CAAC,cAAc,EAExD,IAAI,CAAC,YAAY,GACjB,IAAI,CAAC,WAAW,EACpB,CAEA,aAAc,CACV,GAAM,CAAA,OAAE,CAAM,CAAE,CAAG,IAAI,CAAC,IAAI,CAgB5B,IAAK,GAAM,CAAA,OAAE,CAAM,CAAA,UAAE,CAAS,CAAA,SAAE,CAAQ,CAAE,EAd3B,CAAC,CACZ,OAAQ,IAAI,CAAC,cAAc,CAC3B,UAAW,YACX,SAAU,AAAC,GAAsB,IAAI,CAAC,WAAW,CAAC,EACtD,EAAG,CACC,OAAQ,IAAI,CAAC,eAAe,CAC5B,UAAW,QACX,SAAU,AAAC,GAAsB,IAAI,CAAC,eAAe,CAAC,EAC1D,EAAG,CACC,OAAQ,SACR,UAAW,UACX,SAAU,AAAC,GAAyB,IAAI,CAAC,SAAS,CAAC,EACvD,EAAE,CAGE,EAAO,gBAAgB,CAAC,EAAW,EAAiB,CAAE,OAAA,CAAO,EAErE,CAEA,YAAY,CAAiB,CAAE,CAC3B,GAAM,CAAA,OAAE,CAAM,CAAA,QAAE,CAAO,CAAE,CAAG,EAC5B,GAAI,CAAE,CAAA,aAAkB,WAAA,EAAc,OAEtC,IAAI,EAAgB,EAAO,OAAO,CAAC,wBAEnC,GAAI,CAAC,GAEG,CADJ,CAAA,EAAgB,EAAO,OAAO,CAAC,gBAA/B,EACoB,OAGxB,IAAM,EAAuB,AAAC,IAC1B,IAAM,EAAO,EAAQ,qBAAqB,GAG1C,OAAO,AADQ,EADC,EAAK,CAAC,CAAG,EAAK,KAAK,CAAG,EAEtB,OAAS,OAC7B,EAEI,EAAgB,EAAO,OAAO,CAAC,WAC/B,EAEJ,GAAI,EACA,EAAY,EAAqB,OAC9B,CACH,EAAY,EAAqB,GAEjC,IAAM,EAAe,AAAA,CAAA,EAAA,OAAA,OAAM,AAAN,EAAQ,UAAW,GAExC,EAAgB,AAAc,SAAd,EACZ,CAAY,CAAC,EAAE,CACf,CAAY,CAAC,EAAa,MAAM,CAAG,EAAE,AAC7C,CAIA,IAAI,EAAiB,AAFF,AAAA,CAAA,EAAA,OAAA,OAAM,AAAN,EAAQ,wBAAyB,IAAI,CAAC,cAAc,EAEvC,OAAO,CAAC,EAEpC,AAAc,CAAA,UAAd,GAAuB,IAE3B,IAAI,CAAC,iBAAiB,CAAC,EAC3B,CAEA,gBAAgB,CAAiB,CAAE,CAE/B,IAAM,EAAa,AADJ,EAAM,MAAM,CACD,OAAO,CAAC,QAElC,GAAI,CAAC,EAAY,OAEjB,GAAM,CAAA,IAAE,CAAG,CAAE,CAAG,EAAW,OAAO,AAE9B,CAAA,GAAK,IAAI,CAAC,UAAU,CAAC,EAC7B,CAEA,WAAW,CAAW,CAAE,CAEpB,IAAM,EAAoB,IAAM,AAAe,IAAf,EAAI,MAAM,EAAU,gBAAgB,IAAI,CAAC,GAD/C,iCAAW,OAAO,CAAC,QAAQ,CAAC,GAIlD,IAAI,CAAC,YAAY,CAAC,GACX,KACP,IAAI,CAAC,SAAS,CAAC,EAEvB,CAEA,UAAU,CAAW,CAAE,CACnB,IAAM,EAAU,AAAC,GAAc,KAAK,IAAI,CAAC,GACnC,EAAgB,AAAC,GAAc,UAAU,IAAI,CAAC,GAC9C,EAAc,AAAC,GAAc,OAAO,IAAI,CAAC,GACzC,EAAa,AAAC,GAAc,OAAO,IAAI,CAAC,GAExC,EAAU,EACV,EAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAG,GAEtD,GAAI,CAAA,EAAc,IACV,IAAY,EAGpB,GAAI,AAAY,MAAZ,GAAoB,EAGjB,CACH,GAAI,CAAC,EAAQ,IAAa,CAAC,EAAW,IAAa,EAAY,IAC3D,GAAY,CAAC,EAAQ,IAAa,AAAY,MAAZ,EADmC,OAGzE,IAAI,CAAC,UAAU,CAAC,GAChB,IAAI,CAAC,iBAAiB,EAC1B,MARI,IAAI,CAAC,UAAU,CAAC,MAChB,IAAI,CAAC,iBAAiB,EAQ9B,CAEA,UAAU,CAAoB,CAAE,CAC5B,IAAI,EAAM,OAAO,CAEjB,GAAI,AAAc,cAAd,EAAM,GAAG,CACT,IAAI,CAAC,YAAY,CAAC,kBACf,GAAI,AAAc,UAAd,EAAM,GAAG,CAChB,IAAI,CAAC,YAAY,CAAC,UACf,GAAI,AAAc,WAAd,EAAM,GAAG,CAChB,IAAI,CAAC,YAAY,CAAC,cACf,GAAI,AAAc,cAAd,EAAM,GAAG,CAAkB,CAClC,IAAI,CAAC,cAAc,GAEnB,IAAM,EAAM,CAER,CAAA,IAAI,CAAC,cAAc,CAAG,GACtB,CAAA,IAAI,CAAC,cAAc,CAAG,CAD1B,EAIA,IAAI,CAAC,iBAAiB,EAC1B,MAAO,GAAI,AAAc,eAAd,EAAM,GAAG,CAAmB,CACnC,IAAI,CAAC,cAAc,GAEnB,IAAM,EAAM,IAAI,CAAC,aAAa,CAAC,MAAM,AAEjC,CAAA,IAAI,CAAC,cAAc,CAAG,GACtB,CAAA,IAAI,CAAC,cAAc,CAAG,CAD1B,EAIA,IAAI,CAAC,iBAAiB,EAC1B,MACI,IAAI,CAAC,UAAU,CAAC,EAAM,GAAG,CAEjC,CAEA,UAAU,CAAa,CAAE,CACrB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EACrC,CAEA,UAAU,CAAa,CAAE,CAAY,CAAE,CACnC,IAAM,EAAS,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAG,GACrC,EAAQ,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAQ,EAC/C,CAAA,IAAI,CAAC,aAAa,CAAG,EAAS,EAAO,CACzC,CAEA,aAAa,CAAyD,CAAE,CAChE,AAAW,UAAX,EACA,IAAI,CAAC,YAAY,GACV,AAAW,cAAX,EACP,IAAI,CAAC,SAAS,GACP,AAAW,MAAX,EACP,IAAI,CAAC,aAAa,GACX,AAAW,OAAX,EACP,IAAI,CAAC,cAAc,GACZ,AAAW,MAAX,GACP,IAAI,CAAC,YAAY,EAEzB,CAGA,eAAgB,CACZ,GAAI,CAAC,IAAI,CAAC,aAAa,CAAE,OAEzB,IAAM,EAAc,IAAI,CAAC,eAAe,CAAC,WACzC,GAAI,CAAC,EAAa,OAElB,IAAM,EAAgB,AAAA,CAAA,EAAA,OAAA,IAAG,AAAH,EAAK,UAAW,GACtC,GAAI,CAAC,EAAe,OAEpB,IAAM,EAAoB,EAAc,sBAAsB,CAC9D,GAAI,CAAC,GAAqB,CAAC,EAAkB,SAAS,CAAC,QAAQ,CAAC,SAAU,OAE1E,IAAM,EAAS,AAAA,CAAA,EAAA,OAAA,OAAM,AAAN,EAAQ,SAAU,GAE7B,EAAY,GAAI,EAAQ,CAAA,EAAO,EAAY,KAE/C,IAAK,IAAM,KAAS,EAAQ,CACxB,IAAM,EAAc,EAAM,WAAW,EAAI,EAErC,CAAA,IAAU,GACV,GAAa,EAAY,EACzB,EAAQ,CAAA,GAER,GAAa,CAErB,CAEA,IAAI,CAAC,aAAa,CAAG,EAEjB,GAAO,CAAA,IAAI,CAAC,cAAc,EAAI,EAAU,MAAM,AAAN,EAE5C,IAAI,CAAC,iBAAiB,EAC1B,CAEA,gBAAiB,CACb,IAAM,EAAa,IAAI,IAAI,CAAC,aAAa,CAAC,CAIpC,EAAU,AADK,AAFH,EAAW,MAAM,CAAC,AAAA,GAAK,AAAM,MAAN,GAAW,MAAM,CACvC,EAAW,MAAM,CAAC,AAAA,GAAK,AAAM,MAAN,GAAW,MAAM,CAE5B,IAAM,IAErC,IAAI,CAAC,UAAU,CAAC,GAChB,IAAI,CAAC,iBAAiB,EAC1B,CAEA,cAAe,CACX,GAAK,IAAI,CAAC,aAAa,CACnB,AAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,eAAe,IAC/C,CAAA,AAAuB,OAAvB,IAAI,CAAC,aAAa,EAAa,MAAM,IAAI,CAAC,aAAa,CAAA,IACvD,IAAI,CAAC,iBAAiB,GAE1B,IAAI,CAAC,kBAAkB,CAAC,WAAY,MACpC,IAAI,CAAC,kBAAkB,CAAC,UAAW,YACnC,IAAI,CAAC,kBAAkB,CAAC,OAAQ,WAEhC,IAAI,CAAC,aAAa,CAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EACzD,IAAI,CAAC,cAAc,CAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EACnD,CAEA,OAAO,CAAW,CAAE,CAChB,OAAO,EAAI,OAAO,CAAC,KAAM,GAC7B,CAEA,IAAI,mBAAoB,CACpB,IAAM,EAAgB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAC9C,EAAsB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAEhE,OACK,IAAkB,GAClB,WAAW,KAAmB,WAAW,EAElD,CAEA,WAAY,CACR,GAAI,CAAC,IAAI,CAAC,aAAa,CAAE,OAEzB,IAAM,EAAY,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAG,IAAI,CAAC,cAAc,CAAG,GAC9D,EAAW,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAK7D,GAHA,IAAI,CAAC,aAAa,CAAG,EAAY,EACjC,IAAI,CAAC,cAAc,CAAG,KAAK,GAAG,CAAC,IAAI,CAAC,cAAc,CAAG,EAAG,GAEpD,CAAC,IAAI,CAAC,aAAa,CAAE,CACrB,IAAI,CAAC,WAAW,GAEhB,IAAM,EAAqB,IAAI,CAAC,eAAe,CAAC,UAC5C,CAAA,GAAoB,EAAmB,MAAM,GAEjD,IAAI,CAAC,sBAAsB,GAC3B,MACJ,CAEA,IAAI,CAAC,iBAAiB,EAC1B,CAEA,WAAW,CAAc,CAAE,CACvB,IAAM,EAAY,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAG,IAAI,CAAC,cAAc,EAC3D,EAAW,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAE7D,CAAA,IAAI,CAAC,aAAa,CAAG,EAAY,EAAS,EAC1C,IAAI,CAAC,cAAc,EAAI,EAAO,MAAM,AACxC,CAEA,SAAU,CACN,IAAI,CAAC,IAAI,CAAC,KAAK,EACnB,CAEA,mBAAoB,CAChB,IAAM,EAAe,AAAA,CAAA,EAAA,OAAA,IAAG,AAAH,EAAK,SAAU,IAAI,CAAC,cAAc,CACnD,CAAA,GAAc,CAAA,EAAa,SAAS,CAAG,EAA3C,CACJ,CAEA,cAAe,CACX,IAAI,CAAC,WAAW,GAChB,IAAI,CAAC,iBAAiB,GACtB,IAAI,CAAC,sBAAsB,EAC/B,CAEA,aAAc,CACV,IAAI,CAAC,aAAa,CAAG,GACrB,IAAI,CAAC,cAAc,CAAG,EACtB,IAAI,CAAC,aAAa,CAAG,IACzB,CAEA,wBAAyB,CACrB,IAAM,EAAmB,IAAI,CAAC,iBAAiB,GAE/C,IAAI,CAAC,iBAAiB,CAAC,GAEvB,IAAI,CAAC,kBAAkB,CAAC,EAAkB,CACtC,SAAU,UACV,OAAQ,CAAC,CACL,MAAO,IACP,OAAQ,CAAA,EACR,UAAW,OACf,EAAG,CACC,MAAO,IACP,OAAQ,CAAA,EACR,UAAW,QACf,EAAE,AACN,EACJ,CAEA,kBAAkB,CAAgB,CAAE,CAChC,IAAI,CAAC,cAAc,CAAG,EACtB,IAAI,CAAC,iBAAiB,EAC1B,CAEA,gBAAgB,CAAyC,CAAE,CACvD,MAAO,AAAA,CAAA,EAAA,OAAA,IAAG,AAAH,EAAK,CAAC,MAAM,EAAE,EAAA,CAAU,CAAE,IAAI,CAAC,cAAc,CACxD,CAEA,kBAAkB,CAAwB,CAAE,CACxC,EAAY,SAAS,CAAC,GAAG,CAAC,cAE1B,IAAM,EAAU,WAAW,IAAM,EAAY,MAAM,GAAI,KAEvD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAa,EACrC,CAEA,iBAAiB,CAAwB,CAAE,CACvC,EAAY,SAAS,CAAC,MAAM,CAAC,cAE7B,IAAM,EAAU,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAEhC,IACA,aAAa,GACb,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAE/B,CAEA,mBAAoB,CAChB,IAAI,CAAC,eAAe,GACpB,IAAI,CAAC,wBAAwB,GAC7B,IAAI,CAAC,qBAAqB,EAC9B,CAEA,0BAA2B,CACvB,IAAI,EAAqB,IAAI,CAAC,eAAe,CAAC,WAEzC,IACD,EAAqB,IAAI,CAAC,iBAAiB,GAC3C,IAAI,CAAC,iBAAiB,CAAC,IAG3B,IAAI,CAAC,kBAAkB,CAAC,EAAoB,CACxC,SAAU,UACV,OAAQ,IAAI,CAAC,iBAAiB,EAClC,EACJ,CAEA,uBAAwB,CACpB,IAAI,EAAkB,IAAI,CAAC,eAAe,CAAC,QAE3C,GAAI,IAAI,CAAC,iBAAiB,EAAI,CAAC,IAAI,CAAC,mBAAmB,CAAE,CACjD,GAAiB,IAAI,CAAC,iBAAiB,CAAC,GAC5C,MACJ,CAEK,IACD,EAAkB,IAAI,CAAC,iBAAiB,GACxC,IAAI,CAAC,iBAAiB,CAAC,IAG3B,IAAI,CAAC,kBAAkB,CAAC,EAAiB,CACrC,SAAU,OACV,OAAQ,CAAC,CACL,MAAO,IAAI,CAAC,mBAAmB,CAC/B,OAAQ,CAAA,EACR,UAAW,QACf,EAAE,AACN,EACJ,CAEA,iBAAkB,CACd,GAAI,CACA,IAAI,CAAC,aAAa,CAAG,AAAA,CAAA,EAAA,OAAA,QAAO,AAAP,EAAS,IAAI,CAAC,aAAa,CACpD,CAAE,KAAM,CACJ,IAAI,CAAC,aAAa,CAAG,IACzB,CAEA,OAAO,IAAI,CAAC,aAAa,AAC7B,CAEA,IAAI,qBAAsB,CACtB,OAAO,IAAI,CAAC,aAAa,EAAE,WAAW,QAAQ,eAAgB,KAAO,EACzE,CAEA,mBAAoB,CAChB,IAAM,EAAc,SAAS,aAAa,CAAC,OAE3C,OADA,EAAY,SAAS,CAAG,OACjB,CACX,CAEA,oBAAqB,CACjB,IAAM,EAAe,SAAS,aAAa,CAAC,OAE5C,OADA,EAAa,SAAS,CAAG,QAClB,CACX,CAEA,mBAAmB,CAAwB,CAAE,CAAsB,CAAE,CACjE,GAAM,CAAA,SAAE,CAAQ,CAAA,UAAE,CAAS,CAAA,OAAE,CAAM,CAAE,CAAG,EASxC,IAAK,IAAM,KAPX,AAAA,CAAA,EAAA,OAAA,UAAS,AAAT,EAAW,CACP,QAAS,EACT,WAAY,CAAC,OAAQ,EAAU,EAAU,AAC7C,GAEA,EAAY,SAAS,CAAG,GAEE,GAAQ,CAC9B,IAAM,EAAe,IAAI,CAAC,kBAAkB,GAE5C,IAAI,CAAC,mBAAmB,CAAC,EAAc,GAEvC,EAAY,WAAW,CAAC,EAC5B,CAQA,OANI,EAAY,aAAa,EACzB,IAAI,CAAC,sBAAsB,CAAC,GAGhC,IAAI,CAAC,gBAAgB,CAAC,GAEf,CACX,CAEA,oBAAoB,CAAyB,CAAE,CAAwB,CAAE,CACrE,GAAM,CAAA,MAAE,CAAK,CAAA,OAAE,CAAM,CAAA,UAAE,CAAS,CAAE,CAAG,EAOrC,GALA,AAAA,CAAA,EAAA,OAAA,UAAS,AAAT,EAAW,CACP,QAAS,EACT,WAAY,CAAC,QAAS,EAAW,GAAU,SAAS,AACxD,GAEI,AAAU,MAAV,EAAe,OAAO,EAM1B,IAAK,IAAM,KAJX,EAAa,SAAS,CAAG,GAET,IAAI,EAAM,EAEI,CAC1B,IAAM,EAAgB,SAAS,aAAa,CAAC,OAC7C,CAAA,EAAc,SAAS,CAAG,SAC1B,EAAc,WAAW,CAAG,EAE5B,EAAa,WAAW,CAAC,EAC7B,CACJ,CAEA,kBAAkB,CAAwB,CAAE,CAGxC,AAFqB,AAAA,CAAA,EAAA,OAAA,IAAG,AAAH,EAAK,SAAU,IAAI,CAAC,cAAc,EAE1C,WAAW,CAAC,EAC7B,CAEA,kBAAkB,EAAS,IAAI,CAAC,aAAa,CAAE,CAK3C,MAAO,AAJS,CAAA,EACX,OAAO,CAAC,MAAO,IACf,KAAK,CAAC,6BAA+B,EAAE,AAAF,EAE3B,GAAG,CAAC,AAAC,GAAmB,CAAA,CAAE,MAAO,EAAQ,EAAG,CAAA,EAC/D,CAEA,kBAAkB,EAAS,IAAI,CAAC,aAAa,CAAE,EAAiB,IAAI,CAAC,cAAc,CAAE,CACjF,GAAI,AAA0B,UAA1B,OAAO,GAA+B,GAAkB,EAAG,CAC3D,IAAM,EAAa,IAAI,EAAO,CAC9B,EAAW,MAAM,CAAC,EAAgB,EAAG,KACrC,EAAS,EAAW,IAAI,CAAC,GAC7B,CAEA,IAAM,EAAU,IAAI,CAAC,iBAAiB,CAAC,GACjC,EAAS,EAAE,CAEjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAM,CAAE,IAAK,CACrC,IAAM,EAAO,CAAO,CAAC,EAAE,CAAC,KAAK,CAEzB,EAAO,CAAO,CAAC,EAAI,EAAE,EAAE,MACvB,EAAO,CAAO,CAAC,EAAI,EAAE,EAAE,KAEvB,AAAS,CAAA,MAAT,GAAc,CAAA,EAAO,CAAO,CAAC,EAAI,EAAE,EAAE,KAAzC,EACI,AAAS,MAAT,GAAc,CAAA,EAAO,CAAO,CAAC,EAAI,EAAE,EAAE,KAAzC,EAEA,IAAM,EACF,AAAS,MAAT,GACA,AAAS,MAAT,GACA,UAAU,IAAI,CAAC,IAEV,OAAO,IAAI,CAAC,IAAS,GAAQ,KAAK,IAAI,CAAC,IACvC,CAAA,CAAC,GAAQ,CAAC,SAAS,IAAI,CAAC,EAAA,EAI7B,EAAY,GAAI,EAAQ,EAExB,QAAQ,IAAI,CAAC,GACb,EAAY,SACL,UAAU,IAAI,CAAC,GAEtB,EAAY,AADS,QAAQ,IAAI,CAAC,GACP,SAAW,UAC/B,OAAO,IAAI,CAAC,GACnB,EAAY,QACL,AAAS,MAAT,GACP,CAAA,EAAY,QADT,EAIP,EAAO,IAAI,CAAC,CAAE,MAAA,EAAO,OAAQ,CAAC,EAAc,UAAA,CAAU,EAC1D,CAEA,OAAO,CACX,CAEA,uBAAuB,CAAwB,CAAE,CAC7C,IAAM,EAAW,CAAC,WAAY,UAAW,OAAO,CAC1C,EAAU,EAAY,SAAS,CACrC,OAAO,EAAS,IAAI,CAAC,AAAC,GAAa,EAAQ,QAAQ,CAAC,KAAc,IACtE,CAEA,uBAAuB,CAAwB,CAAE,CAC7C,IAAM,EAAQ,EAAY,SAAS,CAAC,CAAA,GAEpC,EAAM,SAAS,CAAC,GAAG,CAAC,QAEpB,EAAY,aAAa,EAAE,YAAY,GAEvC,IAAM,EAAa,EAAM,WAAW,CACpC,EAAM,MAAM,GAEZ,IAAM,EAAQ,iBAAiB,GAGzB,EAAU,AAFI,WAAW,EAAM,WAAW,EAC3B,WAAW,EAAM,YAAY,EAE5C,EAAW,IAAI,CAAC,cAAc,CAAC,WAAW,CAAG,EAC7C,EAAe,AAAA,CAAA,EAAA,OAAA,KAAI,AAAJ,EAAM,EAAW,EAAY,EAAG,GAErD,EAAY,KAAK,CAAC,WAAW,CAAC,UAAW,EAAa,QAAQ,GAClE,CAEA,mBACI,CAAqC,CACrC,CAA0C,CAC5C,CACE,IAAM,EAAc,IAAI,CAAC,eAAe,CAAC,GACzC,GAAK,GAEL,GAAI,AAAS,YAAT,EAAoB,CACpB,IAAM,EAAgB,AAAA,CAAA,EAAA,OAAA,IAAG,AAAH,EAAK,UAAW,EAClC,CAAA,GAAe,EAAc,MAAM,EAC3C,CAEI,GACA,EAAY,SAAS,CAAC,MAAM,CAAC,GAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,GAC1B,IAAI,CAAC,sBAAsB,CAAC,IAE5B,IAAI,CAAC,iBAAiB,CAAC,GAE/B,CACJ,CAEA,MAAM,iCAAa,IAAI,iCAEvB,OAAO,MAAM,CAAC,OAAQ,CAAE,WAAA,gCAAW","sources":["<anon>","src/utils.ts","src/main.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"mDWTX\", function(module, exports) {\n\n$parcel$export(module.exports, \"find\", () => find);\n$parcel$export(module.exports, \"findAll\", () => findAll);\n$parcel$export(module.exports, \"clamp\", () => clamp);\n$parcel$export(module.exports, \"setClasses\", () => setClasses);\n$parcel$export(module.exports, \"safeEval\", () => safeEval);\nfunction find(selector, startNode = document) {\n    return startNode.querySelector(selector);\n}\nfunction findAll(selector, startNode = document) {\n    return [\n        ...startNode.querySelectorAll(selector)\n    ];\n}\nconst clamp = (value, min, max)=>{\n    if (value < min) return min;\n    if (value > max) return max;\n    return value;\n};\nconst toggleClasses = (options)=>{\n    const classNames = options.classNames.filter(Boolean);\n    if (!classNames.length) return;\n    options.toggle ? options.element.classList.add(...classNames) : options.element.classList.remove(...classNames);\n};\nconst addClasses = (options)=>{\n    return toggleClasses({\n        ...options,\n        toggle: true\n    });\n};\nconst removeClasses = (options)=>{\n    return toggleClasses({\n        ...options,\n        toggle: false\n    });\n};\nconst setClasses = (options)=>{\n    options.element.className = '';\n    return toggleClasses({\n        ...options,\n        toggle: true\n    });\n};\nfunction safeEval(expression) {\n    const allowed = /^[0-9+\\-*/().\\s]+$/;\n    if (!allowed.test(expression)) throw new Error('Invalid characters in expression');\n    try {\n        return eval(expression);\n    } catch (error) {\n        throw new Error('Invalid expression');\n    }\n}\nfunction pointInRect(point, rect) {\n    return point.x >= rect.x && point.x <= rect.x + rect.width && point.y >= rect.y && point.y <= rect.y + rect.height;\n}\n\n});\n\n\nvar $mDWTX = parcelRequire(\"mDWTX\");\nclass $ad2bcec7a0192558$var$Calculator {\n    static{\n        this.actions = [\n            'clear',\n            'backspace',\n            '%',\n            '()',\n            '='\n        ];\n    }\n    constructor(selector = '.calculator'){\n        this.removeList = new Map();\n        this.ctrl = new AbortController();\n        this.element = (0, $mDWTX.find)(selector);\n        this.displayElement = (0, $mDWTX.find)('.display', this.element);\n        this.keyboardElement = (0, $mDWTX.find)('.keyboard', this.element);\n        this.cursorElement = (0, $mDWTX.find)('.cursor', this.displayElement);\n        this.resetDisplay();\n        this.setupEvents();\n    }\n    setupEvents() {\n        const { signal: signal } = this.ctrl;\n        const events = [\n            {\n                target: this.displayElement,\n                eventName: 'mousedown',\n                callback: (event)=>this.onMouseDown(event)\n            },\n            {\n                target: this.keyboardElement,\n                eventName: 'click',\n                callback: (event)=>this.onClickKeyboard(event)\n            },\n            {\n                target: document,\n                eventName: 'keydown',\n                callback: (event)=>this.onKeyDown(event)\n            }\n        ];\n        for (const { target: target, eventName: eventName, callback: callback } of events)target.addEventListener(eventName, callback, {\n            signal: signal\n        });\n    }\n    onMouseDown(event) {\n        const { target: target, clientX: clientX } = event;\n        if (!(target instanceof HTMLElement)) return;\n        let parentElement = target.closest('.item.current .group');\n        if (!parentElement) {\n            parentElement = target.closest('.item.current');\n            if (!parentElement) return;\n        }\n        const getCursorDirectionOn = (element)=>{\n            const rect = element.getBoundingClientRect();\n            const centerX = rect.x + rect.width / 2;\n            const isLeft = clientX < centerX;\n            return isLeft ? 'left' : 'right';\n        };\n        let letterElement = target.closest('.letter'), direction;\n        if (letterElement) direction = getCursorDirectionOn(letterElement);\n        else {\n            direction = getCursorDirectionOn(parentElement);\n            const groupLetters = (0, $mDWTX.findAll)('.letter', parentElement);\n            letterElement = direction === 'left' ? groupLetters[0] : groupLetters[groupLetters.length - 1];\n        }\n        const allLetters = (0, $mDWTX.findAll)('.item.current .letter', this.displayElement);\n        let newCursorIndex = allLetters.indexOf(letterElement);\n        if (direction === 'right') newCursorIndex++;\n        this.setCursorPosition(newCursorIndex);\n    }\n    onClickKeyboard(event) {\n        const target = event.target;\n        const keyElement = target.closest('.key');\n        if (!keyElement) return;\n        const { key: key } = keyElement.dataset;\n        if (key) this.onPressKey(key);\n    }\n    onPressKey(key) {\n        const isActionKey = ()=>$ad2bcec7a0192558$var$Calculator.actions.includes(key);\n        const isSingleCharacter = ()=>key.length === 1 && /[0-9+\\-*/.()]/.test(key);\n        if (isActionKey()) this.handleAction(key);\n        else if (isSingleCharacter()) this.handleKey(key);\n    }\n    handleKey(key) {\n        const isDigit = (s)=>/\\d/.test(s);\n        const isAnyOperator = (s)=>/[+\\-*/]/.test(s);\n        const isMultOrDiv = (s)=>/[*/]/.test(s);\n        const isBrackets = (s)=>/[()]/.test(s);\n        const newChar = key;\n        const prevChar = this.getCharAt(this.cursorPosition - 1);\n        if (isAnyOperator(prevChar)) {\n            if (newChar === prevChar) return;\n        }\n        if (newChar === '.' && !prevChar) {\n            this.typeString('0.');\n            this.updateDisplayHtml();\n        } else {\n            if (!isDigit(prevChar) && !isBrackets(prevChar) && isMultOrDiv(newChar)) return;\n            if (prevChar && !isDigit(prevChar) && newChar === '.') return;\n            this.typeString(newChar);\n            this.updateDisplayHtml();\n        }\n    }\n    onKeyDown(event) {\n        if (event.ctrlKey) return;\n        if (event.key === 'Backspace') this.handleAction('backspace');\n        else if (event.key === 'Enter') this.handleAction('=');\n        else if (event.key === 'Escape') this.handleAction('clear');\n        else if (event.key === 'ArrowLeft') {\n            this.cursorPosition--;\n            const min = 0;\n            if (this.cursorPosition < min) this.cursorPosition = min;\n            this.updateDisplayHtml();\n        } else if (event.key === 'ArrowRight') {\n            this.cursorPosition++;\n            const max = this.currentString.length;\n            if (this.cursorPosition > max) this.cursorPosition = max;\n            this.updateDisplayHtml();\n        } else this.onPressKey(event.key);\n    }\n    getCharAt(index) {\n        return this.currentString.charAt(index);\n    }\n    setCharAt(index, char) {\n        const before = this.currentString.slice(0, index);\n        const after = this.currentString.slice(index + 1);\n        this.currentString = before + char + after;\n    }\n    handleAction(action) {\n        if (action === 'clear') this.resetDisplay();\n        else if (action === 'backspace') this.backspace();\n        else if (action === '%') this.handlePercent();\n        else if (action === '()') this.handleBrackets();\n        else if (action === '=') this.handleEquals();\n    }\n    // there is room for improvement here, but for now, this is good enough.\n    handlePercent() {\n        if (!this.currentString) return;\n        const itemElement = this.findItemElement('current');\n        if (!itemElement) return;\n        const cursorElement = (0, $mDWTX.find)('.cursor', itemElement);\n        if (!cursorElement) return;\n        const groupBeforeCursor = cursorElement.previousElementSibling;\n        if (!groupBeforeCursor || !groupBeforeCursor.classList.contains('group')) return;\n        const groups = (0, $mDWTX.findAll)('.group', itemElement);\n        let newString = '', found = false, addString = '0.';\n        for (const group of groups){\n            const textContent = group.textContent || '';\n            if (group === groupBeforeCursor) {\n                newString += addString + textContent;\n                found = true;\n            } else newString += textContent;\n        }\n        this.currentString = newString;\n        if (found) this.cursorPosition += addString.length;\n        this.updateDisplayHtml();\n    }\n    handleBrackets() {\n        const characters = [\n            ...this.currentString\n        ];\n        const totalOpen = characters.filter((c)=>c === '(').length;\n        const totalClose = characters.filter((c)=>c === ')').length;\n        const missingClose = totalOpen > totalClose;\n        const newChar = missingClose ? ')' : '(';\n        this.typeString(newChar);\n        this.updateDisplayHtml();\n    }\n    handleEquals() {\n        if (!this.currentString) return;\n        if (!this.currentResultString) this.calculateResult();\n        if (this.currentResult === null || isNaN(this.currentResult)) return;\n        if (this.inputSameAsResult) return;\n        this.changeItemPosition('previous', null);\n        this.changeItemPosition('current', 'previous');\n        this.changeItemPosition('next', 'current');\n        this.currentString = this.cleanE(this.currentResultString);\n        this.cursorPosition = this.currentString.length;\n    }\n    cleanE(str) {\n        return str.replace(/e/g, '');\n    }\n    get inputSameAsResult() {\n        const currentString = this.cleanE(this.currentString);\n        const currentResultString = this.cleanE(this.currentResultString);\n        return currentString === currentResultString || parseFloat(currentString) === parseFloat(currentResultString);\n    }\n    backspace() {\n        if (!this.currentString) return;\n        const firstPart = this.currentString.slice(0, this.cursorPosition - 1);\n        const lastPart = this.currentString.slice(this.cursorPosition);\n        this.currentString = firstPart + lastPart;\n        this.cursorPosition = Math.max(this.cursorPosition - 1, 0);\n        if (!this.currentString) {\n            this.resetValues();\n            const currentItemElement = this.findItemElement('current');\n            if (currentItemElement) currentItemElement.remove();\n            this.createEmptyItemElement();\n            return;\n        }\n        this.updateDisplayHtml();\n    }\n    typeString(string) {\n        const firstPart = this.currentString.slice(0, this.cursorPosition);\n        const lastPart = this.currentString.slice(this.cursorPosition);\n        this.currentString = firstPart + string + lastPart;\n        this.cursorPosition += string.length;\n    }\n    destroy() {\n        this.ctrl.abort();\n    }\n    clearItemElements() {\n        const itemsElement = (0, $mDWTX.find)('.items', this.displayElement);\n        if (itemsElement) itemsElement.innerHTML = '';\n    }\n    resetDisplay() {\n        this.resetValues();\n        this.clearItemElements();\n        this.createEmptyItemElement();\n    }\n    resetValues() {\n        this.currentString = '';\n        this.cursorPosition = 0;\n        this.currentResult = null;\n    }\n    createEmptyItemElement() {\n        const emptyItemElement = this.createItemElement();\n        this.appendItemElement(emptyItemElement);\n        this.setItemElementData(emptyItemElement, {\n            position: 'current',\n            groups: [\n                {\n                    value: '0',\n                    spaced: false,\n                    className: 'faded'\n                },\n                {\n                    value: '|',\n                    spaced: false,\n                    className: 'cursor'\n                }\n            ]\n        });\n    }\n    setCursorPosition(position) {\n        this.cursorPosition = position;\n        this.updateDisplayHtml();\n    }\n    findItemElement(position) {\n        return (0, $mDWTX.find)(`.item.${position}`, this.displayElement);\n    }\n    removeItemElement(itemElement) {\n        itemElement.classList.add('no-opacity');\n        const timeout = setTimeout(()=>itemElement.remove(), 500);\n        this.removeList.set(itemElement, timeout);\n    }\n    cancelRemoveItem(itemElement) {\n        itemElement.classList.remove('no-opacity');\n        const timeout = this.removeList.get(itemElement);\n        if (timeout) {\n            clearTimeout(timeout);\n            this.removeList.delete(itemElement);\n        }\n    }\n    updateDisplayHtml() {\n        this.calculateResult();\n        this.updateCurrentItemElement();\n        this.updateNextItemElement();\n    }\n    updateCurrentItemElement() {\n        let currentItemElement = this.findItemElement('current');\n        if (!currentItemElement) {\n            currentItemElement = this.createItemElement();\n            this.appendItemElement(currentItemElement);\n        }\n        this.setItemElementData(currentItemElement, {\n            position: 'current',\n            groups: this.parseStringGroups()\n        });\n    }\n    updateNextItemElement() {\n        let nextItemElement = this.findItemElement('next');\n        if (this.inputSameAsResult || !this.currentResultString) {\n            if (nextItemElement) this.removeItemElement(nextItemElement);\n            return;\n        }\n        if (!nextItemElement) {\n            nextItemElement = this.createItemElement();\n            this.appendItemElement(nextItemElement);\n        }\n        this.setItemElementData(nextItemElement, {\n            position: 'next',\n            groups: [\n                {\n                    value: this.currentResultString,\n                    spaced: false,\n                    className: 'digits'\n                }\n            ]\n        });\n    }\n    calculateResult() {\n        try {\n            this.currentResult = (0, $mDWTX.safeEval)(this.currentString);\n        } catch  {\n            this.currentResult = null;\n        }\n        return this.currentResult;\n    }\n    get currentResultString() {\n        return this.currentResult?.toString().replace(/[^0-9e.\\-+]/g, '') || '';\n    }\n    createItemElement() {\n        const itemElement = document.createElement('div');\n        itemElement.className = 'item';\n        return itemElement;\n    }\n    createGroupElement() {\n        const groupElement = document.createElement('div');\n        groupElement.className = 'group';\n        return groupElement;\n    }\n    setItemElementData(itemElement, itemObject) {\n        const { position: position, className: className, groups: groups } = itemObject;\n        (0, $mDWTX.setClasses)({\n            element: itemElement,\n            classNames: [\n                'item',\n                position,\n                className\n            ]\n        });\n        itemElement.innerHTML = '';\n        for (const groupObject of groups){\n            const groupElement = this.createGroupElement();\n            this.setGroupElementData(groupElement, groupObject);\n            itemElement.appendChild(groupElement);\n        }\n        if (itemElement.parentElement) this.updateItemElementScale(itemElement);\n        this.cancelRemoveItem(itemElement);\n        return itemElement;\n    }\n    setGroupElementData(groupElement, groupObject) {\n        const { value: value, spaced: spaced, className: className } = groupObject;\n        (0, $mDWTX.setClasses)({\n            element: groupElement,\n            classNames: [\n                'group',\n                className,\n                spaced && 'spaced'\n            ]\n        });\n        if (value === '|') return groupElement;\n        groupElement.innerHTML = '';\n        const letters = [\n            ...value\n        ];\n        for (const letter of letters){\n            const letterElement = document.createElement('span');\n            letterElement.className = 'letter';\n            letterElement.textContent = letter;\n            groupElement.appendChild(letterElement);\n        }\n    }\n    appendItemElement(itemElement) {\n        const itemsElement = (0, $mDWTX.find)('.items', this.displayElement);\n        itemsElement.appendChild(itemElement);\n    }\n    matchStringGroups(string = this.currentString) {\n        const matches = string.replace(/ +/g, '').match(/\\d+(\\.\\d+)?|[+\\-*/()|.]/g) || [];\n        return matches.map((match)=>({\n                value: match + ''\n            }));\n    }\n    parseStringGroups(string = this.currentString, insertCursorAt = this.cursorPosition) {\n        if (typeof insertCursorAt === 'number' && insertCursorAt >= 0) {\n            const characters = [\n                ...string\n            ];\n            characters.splice(insertCursorAt, 0, '|');\n            string = characters.join('');\n        }\n        const matches = this.matchStringGroups(string);\n        const groups = [];\n        for(let i = 0; i < matches.length; i++){\n            const curr = matches[i].value;\n            let prev = matches[i - 1]?.value, next = matches[i + 1]?.value;\n            if (prev === '|') prev = matches[i - 2]?.value;\n            if (next === '|') next = matches[i + 2]?.value;\n            const hasNoSpacing = curr === '|' || curr === '.' || /[0-9()]/.test(curr) || /[+-]/.test(curr) && next && /\\d/.test(next) && (!prev || !/[\\d()]/.test(prev));\n            let className = '', value = curr;\n            if (/\\d|\\./.test(curr)) className = 'digits';\n            else if (/[+\\-*/]/.test(curr)) {\n                const isDigitPiece = /[\\-+]/.test(curr) // && hasNoSpacing;\n                ;\n                className = isDigitPiece ? 'digits' : 'colored';\n            } else if (/[()]/.test(curr)) className = 'faded';\n            else if (curr === '|') className = 'cursor';\n            groups.push({\n                value: value,\n                spaced: !hasNoSpacing,\n                className: className\n            });\n        }\n        return groups;\n    }\n    getItemElementPosition(itemElement) {\n        const priority = [\n            'previous',\n            'current',\n            'next'\n        ];\n        const classes = itemElement.classList;\n        return priority.find((position)=>classes.contains(position)) || null;\n    }\n    updateItemElementScale(itemElement) {\n        const clone = itemElement.cloneNode(true);\n        clone.classList.add('temp');\n        itemElement.parentElement?.appendChild(clone);\n        const finalWidth = clone.offsetWidth;\n        clone.remove();\n        const style = getComputedStyle(itemElement);\n        const paddingLeft = parseFloat(style.paddingLeft);\n        const paddingRight = parseFloat(style.paddingRight);\n        const padding = paddingLeft + paddingRight;\n        const maxWidth = this.displayElement.offsetWidth - padding;\n        const desiredScale = (0, $mDWTX.clamp)(maxWidth / finalWidth, 0, 1);\n        itemElement.style.setProperty('--scale', desiredScale.toString());\n    }\n    changeItemPosition(from, to) {\n        const itemElement = this.findItemElement(from);\n        if (!itemElement) return;\n        if (from === 'current') {\n            const cursorElement = (0, $mDWTX.find)('.cursor', itemElement);\n            if (cursorElement) cursorElement.remove();\n        }\n        if (to) {\n            itemElement.classList.remove(from);\n            itemElement.classList.add(to);\n            this.updateItemElementScale(itemElement);\n        } else this.removeItemElement(itemElement);\n    }\n}\nconst $ad2bcec7a0192558$var$calculator = new $ad2bcec7a0192558$var$Calculator();\nObject.assign(window, {\n    calculator: $ad2bcec7a0192558$var$calculator\n});\n\n\n//# sourceMappingURL=calculator.146e97f7.js.map\n","import { ToggleClassesArgs, ToggleClassChildFnArgs } from './types';\r\n\r\nexport function find<T extends HTMLElement = HTMLElement>(\r\n    selector: string,\r\n    startNode: Document | HTMLElement = document\r\n) {\r\n    return startNode.querySelector<T>(selector);\r\n}\r\n\r\nexport function findAll<T extends HTMLElement = HTMLElement>(\r\n    selector: string,\r\n    startNode: Document | HTMLElement = document\r\n) {\r\n    return [...startNode.querySelectorAll<T>(selector)];\r\n}\r\n\r\nexport const clamp = (value: number, min: number, max: number) => {\r\n    if (value < min) return min;\r\n    if (value > max) return max;\r\n    return value;\r\n};\r\n\r\nexport const toggleClasses = (options: ToggleClassesArgs) => {\r\n    const classNames = options.classNames.filter(Boolean);\r\n\r\n    if (!classNames.length) return;\r\n\r\n    options.toggle ?\r\n        options.element.classList.add(...classNames) :\r\n        options.element.classList.remove(...classNames);\r\n};\r\n\r\nexport const addClasses = (options: ToggleClassChildFnArgs) => {\r\n    return toggleClasses({ ...options, toggle: true });\r\n};\r\n\r\nexport const removeClasses = (options: ToggleClassChildFnArgs) => {\r\n    return toggleClasses({ ...options, toggle: false });\r\n};\r\n\r\nexport const setClasses = (options: ToggleClassChildFnArgs) => {\r\n    options.element.className = '';\r\n    return toggleClasses({ ...options, toggle: true });\r\n};\r\n\r\n// for a simple calculator, this is good enough.\r\n// but for a more complex calculator, this would need to be more robust / secure.\r\nexport function safeEval(expression: string) {\r\n    const allowed = /^[0-9+\\-*/().\\s]+$/;\r\n\r\n    if (!allowed.test(expression)) {\r\n        throw new Error('Invalid characters in expression');\r\n    }\r\n\r\n    try {\r\n        return eval(expression);\r\n    } catch (error) {\r\n        throw new Error('Invalid expression');\r\n    }\r\n}\r\n\r\nexport function pointInRect(\r\n    point: { x: number; y: number },\r\n    rect: { x: number; y: number; width: number; height: number }\r\n) {\r\n    return (\r\n        point.x >= rect.x &&\r\n        point.x <= rect.x + rect.width &&\r\n        point.y >= rect.y &&\r\n        point.y <= rect.y + rect.height\r\n    )\r\n}","import { EventObject, GroupObject, ItemObject } from './types';\r\nimport { clamp, find, findAll, safeEval, setClasses } from './utils';\r\n\r\nclass Calculator {\r\n    static actions = ['clear', 'backspace', '%', '()', '='] as const;\r\n\r\n    element: HTMLElement;\r\n    displayElement: HTMLElement;\r\n    keyboardElement: HTMLElement;\r\n    cursorElement: HTMLElement;\r\n    currentString!: string;\r\n    currentResult!: number | null;\r\n    cursorPosition!: number;\r\n    removeList = new Map<HTMLElement, number>();\r\n    ctrl = new AbortController();\r\n\r\n    constructor(selector = '.calculator') {\r\n        this.element = find(selector)!;\r\n\r\n        this.displayElement = find('.display', this.element)!;\r\n        this.keyboardElement = find('.keyboard', this.element)!;\r\n        this.cursorElement = find('.cursor', this.displayElement)!;\r\n\r\n        this.resetDisplay();\r\n        this.setupEvents();\r\n    }\r\n\r\n    setupEvents() {\r\n        const { signal } = this.ctrl;\r\n\r\n        const events = [{\r\n            target: this.displayElement,\r\n            eventName: 'mousedown',\r\n            callback: (event: MouseEvent) => this.onMouseDown(event)\r\n        }, {\r\n            target: this.keyboardElement,\r\n            eventName: 'click',\r\n            callback: (event: MouseEvent) => this.onClickKeyboard(event)\r\n        }, {\r\n            target: document,\r\n            eventName: 'keydown',\r\n            callback: (event: KeyboardEvent) => this.onKeyDown(event)\r\n        }] satisfies EventObject[];\r\n\r\n        for (const { target, eventName, callback } of events) {\r\n            target.addEventListener(eventName, callback as any, { signal });\r\n        }\r\n    }\r\n\r\n    onMouseDown(event: MouseEvent) {\r\n        const { target, clientX } = event;\r\n        if (!(target instanceof HTMLElement)) return;\r\n\r\n        let parentElement = target.closest('.item.current .group') as HTMLElement;\r\n\r\n        if (!parentElement) {\r\n            parentElement = target.closest('.item.current') as HTMLElement;\r\n            if (!parentElement) return;\r\n        }\r\n\r\n        const getCursorDirectionOn = (element: HTMLElement) => {\r\n            const rect = element.getBoundingClientRect();\r\n            const centerX = rect.x + rect.width / 2;\r\n            const isLeft = clientX < centerX;\r\n            return isLeft ? 'left' : 'right';\r\n        };\r\n\r\n        let letterElement = target.closest('.letter') as HTMLElement,\r\n            direction: ReturnType<typeof getCursorDirectionOn>;\r\n\r\n        if (letterElement) {\r\n            direction = getCursorDirectionOn(letterElement);\r\n        } else {\r\n            direction = getCursorDirectionOn(parentElement);\r\n\r\n            const groupLetters = findAll('.letter', parentElement);\r\n\r\n            letterElement = direction === 'left' ?\r\n                groupLetters[0] :\r\n                groupLetters[groupLetters.length - 1];\r\n        }\r\n\r\n        const allLetters = findAll('.item.current .letter', this.displayElement);\r\n\r\n        let newCursorIndex = allLetters.indexOf(letterElement);\r\n\r\n        if (direction === 'right') newCursorIndex++;\r\n\r\n        this.setCursorPosition(newCursorIndex);\r\n    }\r\n\r\n    onClickKeyboard(event: MouseEvent) {\r\n        const target = event.target as HTMLElement;\r\n        const keyElement = target.closest('.key') as HTMLElement;\r\n\r\n        if (!keyElement) return;\r\n\r\n        const { key } = keyElement.dataset;\r\n\r\n        if (key) this.onPressKey(key);\r\n    }\r\n\r\n    onPressKey(key: string) {\r\n        const isActionKey = () => Calculator.actions.includes(key as any);\r\n        const isSingleCharacter = () => key.length === 1 && /[0-9+\\-*/.()]/.test(key);\r\n\r\n        if (isActionKey()) {\r\n            this.handleAction(key);\r\n        } else if (isSingleCharacter()) {\r\n            this.handleKey(key);\r\n        }\r\n    }\r\n\r\n    handleKey(key: string) {\r\n        const isDigit = (s: string) => /\\d/.test(s);\r\n        const isAnyOperator = (s: string) => /[+\\-*/]/.test(s);\r\n        const isMultOrDiv = (s: string) => /[*/]/.test(s);\r\n        const isBrackets = (s: string) => /[()]/.test(s);\r\n\r\n        const newChar = key;\r\n        const prevChar = this.getCharAt(this.cursorPosition - 1);\r\n\r\n        if (isAnyOperator(prevChar)) {\r\n            if (newChar === prevChar) return;\r\n        }\r\n\r\n        if (newChar === '.' && !prevChar) {\r\n            this.typeString('0.');\r\n            this.updateDisplayHtml();\r\n        } else {\r\n            if (!isDigit(prevChar) && !isBrackets(prevChar) && isMultOrDiv(newChar)) return;\r\n            if (prevChar && !isDigit(prevChar) && newChar === '.') return;\r\n\r\n            this.typeString(newChar);\r\n            this.updateDisplayHtml();\r\n        }\r\n    }\r\n\r\n    onKeyDown(event: KeyboardEvent) {\r\n        if (event.ctrlKey) return;\r\n\r\n        if (event.key === 'Backspace') {\r\n            this.handleAction('backspace');\r\n        } else if (event.key === 'Enter') {\r\n            this.handleAction('=');\r\n        } else if (event.key === 'Escape') {\r\n            this.handleAction('clear');\r\n        } else if (event.key === 'ArrowLeft') {\r\n            this.cursorPosition--;\r\n\r\n            const min = 0;\r\n\r\n            if (this.cursorPosition < min) {\r\n                this.cursorPosition = min;\r\n            }\r\n\r\n            this.updateDisplayHtml();\r\n        } else if (event.key === 'ArrowRight') {\r\n            this.cursorPosition++;\r\n\r\n            const max = this.currentString.length;\r\n\r\n            if (this.cursorPosition > max) {\r\n                this.cursorPosition = max;\r\n            }\r\n\r\n            this.updateDisplayHtml();\r\n        } else {\r\n            this.onPressKey(event.key);\r\n        }\r\n    }\r\n\r\n    getCharAt(index: number) {\r\n        return this.currentString.charAt(index);\r\n    }\r\n\r\n    setCharAt(index: number, char: string) {\r\n        const before = this.currentString.slice(0, index);\r\n        const after = this.currentString.slice(index + 1);\r\n        this.currentString = before + char + after;\r\n    }\r\n\r\n    handleAction(action: typeof Calculator.actions[number] | (string & {})) {\r\n        if (action === 'clear') {\r\n            this.resetDisplay();\r\n        } else if (action === 'backspace') {\r\n            this.backspace();\r\n        } else if (action === '%') {\r\n            this.handlePercent();\r\n        } else if (action === '()') {\r\n            this.handleBrackets();\r\n        } else if (action === '=') {\r\n            this.handleEquals();\r\n        }\r\n    }\r\n\r\n    // there is room for improvement here, but for now, this is good enough.\r\n    handlePercent() {\r\n        if (!this.currentString) return;\r\n\r\n        const itemElement = this.findItemElement('current');\r\n        if (!itemElement) return;\r\n\r\n        const cursorElement = find('.cursor', itemElement);\r\n        if (!cursorElement) return;\r\n\r\n        const groupBeforeCursor = cursorElement.previousElementSibling;\r\n        if (!groupBeforeCursor || !groupBeforeCursor.classList.contains('group')) return;\r\n\r\n        const groups = findAll('.group', itemElement);\r\n\r\n        let newString = '', found = false, addString = '0.';\r\n\r\n        for (const group of groups) {\r\n            const textContent = group.textContent || '';\r\n\r\n            if (group === groupBeforeCursor) {\r\n                newString += addString + textContent;\r\n                found = true;\r\n            } else {\r\n                newString += textContent;\r\n            }\r\n        }\r\n\r\n        this.currentString = newString;\r\n\r\n        if (found) this.cursorPosition += addString.length;\r\n\r\n        this.updateDisplayHtml();\r\n    }\r\n\r\n    handleBrackets() {\r\n        const characters = [...this.currentString];\r\n        const totalOpen = characters.filter(c => c === '(').length;\r\n        const totalClose = characters.filter(c => c === ')').length;\r\n        const missingClose = totalOpen > totalClose;\r\n        const newChar = missingClose ? ')' : '(';\r\n\r\n        this.typeString(newChar);\r\n        this.updateDisplayHtml();\r\n    }\r\n\r\n    handleEquals() {\r\n        if (!this.currentString) return;\r\n        if (!this.currentResultString) this.calculateResult();\r\n        if (this.currentResult === null || isNaN(this.currentResult)) return;\r\n        if (this.inputSameAsResult) return;\r\n\r\n        this.changeItemPosition('previous', null);\r\n        this.changeItemPosition('current', 'previous');\r\n        this.changeItemPosition('next', 'current');\r\n\r\n        this.currentString = this.cleanE(this.currentResultString);\r\n        this.cursorPosition = this.currentString.length;\r\n    }\r\n\r\n    cleanE(str: string) {\r\n        return str.replace(/e/g, '');\r\n    }\r\n\r\n    get inputSameAsResult() {\r\n        const currentString = this.cleanE(this.currentString);\r\n        const currentResultString = this.cleanE(this.currentResultString);\r\n\r\n        return (\r\n            (currentString === currentResultString) ||\r\n            (parseFloat(currentString) === parseFloat(currentResultString))\r\n        );\r\n    }\r\n\r\n    backspace() {\r\n        if (!this.currentString) return;\r\n\r\n        const firstPart = this.currentString.slice(0, this.cursorPosition - 1);\r\n        const lastPart = this.currentString.slice(this.cursorPosition);\r\n\r\n        this.currentString = firstPart + lastPart;\r\n        this.cursorPosition = Math.max(this.cursorPosition - 1, 0);\r\n\r\n        if (!this.currentString) {\r\n            this.resetValues();\r\n\r\n            const currentItemElement = this.findItemElement('current');\r\n            if (currentItemElement) currentItemElement.remove();\r\n\r\n            this.createEmptyItemElement();\r\n            return;\r\n        }\r\n\r\n        this.updateDisplayHtml();\r\n    }\r\n\r\n    typeString(string: string) {\r\n        const firstPart = this.currentString.slice(0, this.cursorPosition);\r\n        const lastPart = this.currentString.slice(this.cursorPosition);\r\n\r\n        this.currentString = firstPart + string + lastPart;\r\n        this.cursorPosition += string.length;\r\n    }\r\n\r\n    destroy() {\r\n        this.ctrl.abort();\r\n    }\r\n\r\n    clearItemElements() {\r\n        const itemsElement = find('.items', this.displayElement);\r\n        if (itemsElement) itemsElement.innerHTML = '';\r\n    }\r\n\r\n    resetDisplay() {\r\n        this.resetValues();\r\n        this.clearItemElements();\r\n        this.createEmptyItemElement();\r\n    }\r\n\r\n    resetValues() {\r\n        this.currentString = '';\r\n        this.cursorPosition = 0;\r\n        this.currentResult = null;\r\n    }\r\n\r\n    createEmptyItemElement() {\r\n        const emptyItemElement = this.createItemElement();\r\n\r\n        this.appendItemElement(emptyItemElement);\r\n\r\n        this.setItemElementData(emptyItemElement, {\r\n            position: 'current',\r\n            groups: [{\r\n                value: '0',\r\n                spaced: false,\r\n                className: 'faded'\r\n            }, {\r\n                value: '|',\r\n                spaced: false,\r\n                className: 'cursor'\r\n            }]\r\n        });\r\n    }\r\n\r\n    setCursorPosition(position: number) {\r\n        this.cursorPosition = position;\r\n        this.updateDisplayHtml();\r\n    }\r\n\r\n    findItemElement(position: 'previous' | 'current' | 'next') {\r\n        return find(`.item.${position}`, this.displayElement);\r\n    }\r\n\r\n    removeItemElement(itemElement: HTMLElement) {\r\n        itemElement.classList.add('no-opacity');\r\n\r\n        const timeout = setTimeout(() => itemElement.remove(), 500);\r\n\r\n        this.removeList.set(itemElement, timeout);\r\n    }\r\n\r\n    cancelRemoveItem(itemElement: HTMLElement) {\r\n        itemElement.classList.remove('no-opacity');\r\n\r\n        const timeout = this.removeList.get(itemElement);\r\n\r\n        if (timeout) {\r\n            clearTimeout(timeout);\r\n            this.removeList.delete(itemElement);\r\n        }\r\n    }\r\n\r\n    updateDisplayHtml() {\r\n        this.calculateResult();\r\n        this.updateCurrentItemElement();\r\n        this.updateNextItemElement();\r\n    }\r\n\r\n    updateCurrentItemElement() {\r\n        let currentItemElement = this.findItemElement('current');\r\n\r\n        if (!currentItemElement) {\r\n            currentItemElement = this.createItemElement();\r\n            this.appendItemElement(currentItemElement);\r\n        }\r\n\r\n        this.setItemElementData(currentItemElement, {\r\n            position: 'current',\r\n            groups: this.parseStringGroups()\r\n        });\r\n    }\r\n\r\n    updateNextItemElement() {\r\n        let nextItemElement = this.findItemElement('next');\r\n\r\n        if (this.inputSameAsResult || !this.currentResultString) {\r\n            if (nextItemElement) this.removeItemElement(nextItemElement);\r\n            return;\r\n        }\r\n\r\n        if (!nextItemElement) {\r\n            nextItemElement = this.createItemElement();\r\n            this.appendItemElement(nextItemElement);\r\n        }\r\n\r\n        this.setItemElementData(nextItemElement, {\r\n            position: 'next',\r\n            groups: [{\r\n                value: this.currentResultString,\r\n                spaced: false,\r\n                className: 'digits'\r\n            }]\r\n        });\r\n    }\r\n\r\n    calculateResult() {\r\n        try {\r\n            this.currentResult = safeEval(this.currentString) as number;\r\n        } catch {\r\n            this.currentResult = null;\r\n        }\r\n\r\n        return this.currentResult;\r\n    }\r\n\r\n    get currentResultString() {\r\n        return this.currentResult?.toString().replace(/[^0-9e.\\-+]/g, '') || '';\r\n    }\r\n\r\n    createItemElement() {\r\n        const itemElement = document.createElement('div');\r\n        itemElement.className = 'item';\r\n        return itemElement;\r\n    }\r\n\r\n    createGroupElement() {\r\n        const groupElement = document.createElement('div');\r\n        groupElement.className = 'group';\r\n        return groupElement;\r\n    }\r\n\r\n    setItemElementData(itemElement: HTMLElement, itemObject: ItemObject) {\r\n        const { position, className, groups } = itemObject;\r\n\r\n        setClasses({\r\n            element: itemElement,\r\n            classNames: ['item', position, className]\r\n        });\r\n\r\n        itemElement.innerHTML = '';\r\n\r\n        for (const groupObject of groups) {\r\n            const groupElement = this.createGroupElement();\r\n\r\n            this.setGroupElementData(groupElement, groupObject);\r\n\r\n            itemElement.appendChild(groupElement);\r\n        }\r\n\r\n        if (itemElement.parentElement) {\r\n            this.updateItemElementScale(itemElement);\r\n        }\r\n\r\n        this.cancelRemoveItem(itemElement);\r\n\r\n        return itemElement;\r\n    }\r\n\r\n    setGroupElementData(groupElement: HTMLElement, groupObject: GroupObject) {\r\n        const { value, spaced, className } = groupObject;\r\n\r\n        setClasses({\r\n            element: groupElement,\r\n            classNames: ['group', className, spaced && 'spaced']\r\n        });\r\n\r\n        if (value === '|') return groupElement;\r\n\r\n        groupElement.innerHTML = '';\r\n\r\n        const letters = [...value];\r\n\r\n        for (const letter of letters) {\r\n            const letterElement = document.createElement('span');\r\n            letterElement.className = 'letter';\r\n            letterElement.textContent = letter;\r\n\r\n            groupElement.appendChild(letterElement);\r\n        }\r\n    }\r\n\r\n    appendItemElement(itemElement: HTMLElement) {\r\n        const itemsElement = find('.items', this.displayElement)!;\r\n\r\n        itemsElement.appendChild(itemElement);\r\n    }\r\n\r\n    matchStringGroups(string = this.currentString) {\r\n        const matches = string\r\n            .replace(/ +/g, '')\r\n            .match(/\\d+(\\.\\d+)?|[+\\-*/()|.]/g) || [];\r\n\r\n        return matches.map((match: string) => ({ value: match + '' }));\r\n    }\r\n\r\n    parseStringGroups(string = this.currentString, insertCursorAt = this.cursorPosition) {\r\n        if (typeof insertCursorAt === 'number' && insertCursorAt >= 0) {\r\n            const characters = [...string];\r\n            characters.splice(insertCursorAt, 0, '|');\r\n            string = characters.join('');\r\n        }\r\n\r\n        const matches = this.matchStringGroups(string);\r\n        const groups = [] as GroupObject[];\r\n\r\n        for (let i = 0; i < matches.length; i++) {\r\n            const curr = matches[i].value;\r\n\r\n            let prev = matches[i - 1]?.value,\r\n                next = matches[i + 1]?.value;\r\n\r\n            if (prev === '|') prev = matches[i - 2]?.value;\r\n            if (next === '|') next = matches[i + 2]?.value;\r\n\r\n            const hasNoSpacing = (\r\n                curr === '|' ||\r\n                curr === '.' ||\r\n                /[0-9()]/.test(curr) ||\r\n                (\r\n                    (/[+-]/.test(curr) && next && /\\d/.test(next)) &&\r\n                    (!prev || !/[\\d()]/.test(prev))\r\n                )\r\n            );\r\n\r\n            let className = '', value = curr;\r\n\r\n            if (/\\d|\\./.test(curr)) {\r\n                className = 'digits';\r\n            } else if (/[+\\-*/]/.test(curr)) {\r\n                const isDigitPiece = /[\\-+]/.test(curr) // && hasNoSpacing;\r\n                className = isDigitPiece ? 'digits' : 'colored';\r\n            } else if (/[()]/.test(curr)) {\r\n                className = 'faded';\r\n            } else if (curr === '|') {\r\n                className = 'cursor';\r\n            }\r\n\r\n            groups.push({ value, spaced: !hasNoSpacing, className });\r\n        }\r\n\r\n        return groups;\r\n    }\r\n\r\n    getItemElementPosition(itemElement: HTMLElement) {\r\n        const priority = ['previous', 'current', 'next'] as const;\r\n        const classes = itemElement.classList;\r\n        return priority.find((position) => classes.contains(position)) || null;\r\n    }\r\n\r\n    updateItemElementScale(itemElement: HTMLElement) {\r\n        const clone = itemElement.cloneNode(true) as HTMLElement;\r\n\r\n        clone.classList.add('temp');\r\n\r\n        itemElement.parentElement?.appendChild(clone);\r\n\r\n        const finalWidth = clone.offsetWidth;\r\n        clone.remove();\r\n\r\n        const style = getComputedStyle(itemElement);\r\n        const paddingLeft = parseFloat(style.paddingLeft);\r\n        const paddingRight = parseFloat(style.paddingRight);\r\n        const padding = paddingLeft + paddingRight;\r\n        const maxWidth = this.displayElement.offsetWidth - padding;\r\n        const desiredScale = clamp(maxWidth / finalWidth, 0, 1);\r\n\r\n        itemElement.style.setProperty('--scale', desiredScale.toString());\r\n    }\r\n\r\n    changeItemPosition(\r\n        from: 'previous' | 'current' | 'next',\r\n        to: 'previous' | 'current' | 'next' | null\r\n    ) {\r\n        const itemElement = this.findItemElement(from);\r\n        if (!itemElement) return;\r\n\r\n        if (from === 'current') {\r\n            const cursorElement = find('.cursor', itemElement);\r\n            if (cursorElement) cursorElement.remove();\r\n        }\r\n\r\n        if (to) {\r\n            itemElement.classList.remove(from);\r\n            itemElement.classList.add(to);\r\n            this.updateItemElementScale(itemElement);\r\n        } else {\r\n            this.removeItemElement(itemElement);\r\n        }\r\n    }\r\n}\r\n\r\nconst calculator = new Calculator();\r\n\r\nObject.assign(window, { calculator });"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","find","selector","startNode","document","querySelector","findAll","querySelectorAll","clamp","setClasses","safeEval","value","min","max","toggleClasses","options","classNames","filter","Boolean","length","toggle","element","classList","add","remove","addClasses","removeClasses","className","expression","allowed","test","eval","error","pointInRect","point","rect","x","width","y","height","$mDWTX","$ad2bcec7a0192558$var$Calculator","actions","constructor","removeList","Map","ctrl","AbortController","displayElement","keyboardElement","cursorElement","resetDisplay","setupEvents","signal","target","eventName","callback","event","onMouseDown","onClickKeyboard","onKeyDown","addEventListener","clientX","HTMLElement","parentElement","closest","getCursorDirectionOn","getBoundingClientRect","isLeft","letterElement","direction","groupLetters","newCursorIndex","allLetters","indexOf","setCursorPosition","keyElement","key","dataset","onPressKey","isSingleCharacter","includes","handleAction","handleKey","isDigit","isAnyOperator","isMultOrDiv","isBrackets","newChar","prevChar","getCharAt","cursorPosition","typeString","updateDisplayHtml","ctrlKey","currentString","index","charAt","setCharAt","char","before","slice","after","action","backspace","handlePercent","handleBrackets","handleEquals","itemElement","findItemElement","groupBeforeCursor","previousElementSibling","contains","groups","newString","found","addString","group","textContent","characters","missingClose","totalOpen","c","currentResultString","calculateResult","currentResult","isNaN","inputSameAsResult","changeItemPosition","cleanE","str","replace","parseFloat","firstPart","lastPart","Math","resetValues","currentItemElement","createEmptyItemElement","string","destroy","abort","clearItemElements","itemsElement","innerHTML","emptyItemElement","createItemElement","appendItemElement","setItemElementData","position","spaced","removeItemElement","timeout","setTimeout","cancelRemoveItem","clearTimeout","delete","updateCurrentItemElement","updateNextItemElement","parseStringGroups","nextItemElement","toString","createElement","createGroupElement","groupElement","itemObject","groupObject","setGroupElementData","appendChild","updateItemElementScale","letter","matchStringGroups","matches","match","map","insertCursorAt","splice","join","i","curr","prev","next","hasNoSpacing","isDigitPiece","push","getItemElementPosition","priority","classes","clone","cloneNode","finalWidth","offsetWidth","style","getComputedStyle","padding","paddingLeft","paddingRight","maxWidth","desiredScale","setProperty","from","to","$ad2bcec7a0192558$var$calculator","assign","window","calculator"],"version":3,"file":"calculator.146e97f7.js.map"}