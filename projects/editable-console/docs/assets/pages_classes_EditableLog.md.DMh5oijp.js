import{_ as a,c as o,o as t,ae as s}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"Class: EditableLog","description":"","frontmatter":{},"headers":[],"relativePath":"pages/classes/EditableLog.md","filePath":"pages/classes/EditableLog.md"}'),r={name:"pages/classes/EditableLog.md"};function n(l,e,i,d,c,h){return t(),o("div",null,e[0]||(e[0]=[s('<p><a href="./../README.html"><strong>editable-console</strong></a></p><hr><p><a href="./../globals.html">editable-console</a> / EditableLog</p><h1 id="class-editablelog" tabindex="-1">Class: EditableLog <a class="header-anchor" href="#class-editablelog" aria-label="Permalink to &quot;Class: EditableLog&quot;">​</a></h1><p>Defined in: EditableLog.ts:9</p><p>Represents an individual editable log entry.</p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h3><blockquote><p><strong>new EditableLog</strong>(<code>console</code>, <code>type</code>, <code>messages</code>): <code>EditableLog</code></p></blockquote><p>Defined in: EditableLog.ts:24</p><p>Creates an instance of EditableLog.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="console" tabindex="-1">console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;console&quot;">​</a></h5><p><a href="./EditableConsole.html"><code>EditableConsole</code></a></p><p>The parent console.</p><h5 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h5><p><a href="./../type-aliases/LogType.html"><code>LogType</code></a></p><p>The type of log (&#39;info&#39;, &#39;warn&#39;, or &#39;error&#39;).</p><h5 id="messages" tabindex="-1">messages <a class="header-anchor" href="#messages" aria-label="Permalink to &quot;messages&quot;">​</a></h5><p><a href="./../type-aliases/AnyMessage.html"><code>AnyMessage</code></a>[]</p><p>The messages to include in the log.</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>EditableLog</code></p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="console-1" tabindex="-1">console <a class="header-anchor" href="#console-1" aria-label="Permalink to &quot;console&quot;">​</a></h3><blockquote><p><strong>console</strong>: <a href="./EditableConsole.html"><code>EditableConsole</code></a></p></blockquote><p>Defined in: EditableLog.ts:11</p><p>The parent console instance.</p><hr><h3 id="messages-1" tabindex="-1">messages <a class="header-anchor" href="#messages-1" aria-label="Permalink to &quot;messages&quot;">​</a></h3><blockquote><p><strong>messages</strong>: <a href="./EditableMessage.html"><code>EditableMessage</code></a>[] = <code>[]</code></p></blockquote><p>Defined in: EditableLog.ts:15</p><p>Array of editable messages contained in this log entry.</p><hr><h3 id="type-1" tabindex="-1">type <a class="header-anchor" href="#type-1" aria-label="Permalink to &quot;type&quot;">​</a></h3><blockquote><p><strong>type</strong>: <a href="./../type-aliases/LogType.html"><code>LogType</code></a> = <code>&#39;info&#39;</code></p></blockquote><p>Defined in: EditableLog.ts:13</p><p>The type of log entry.</p><h2 id="accessors" tabindex="-1">Accessors <a class="header-anchor" href="#accessors" aria-label="Permalink to &quot;Accessors&quot;">​</a></h2><h3 id="colorfn" tabindex="-1">colorFn <a class="header-anchor" href="#colorfn" aria-label="Permalink to &quot;colorFn&quot;">​</a></h3><h4 id="get-signature" tabindex="-1">Get Signature <a class="header-anchor" href="#get-signature" aria-label="Permalink to &quot;Get Signature&quot;">​</a></h4><blockquote><p><strong>get</strong> <strong>colorFn</strong>(): <code>ChalkInstance</code></p></blockquote><p>Defined in: EditableLog.ts:96</p><p>Gets the chalk color function based on the log type.</p><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>ChalkInstance</code></p><p>A function that applies the appropriate color to the text.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="edit" tabindex="-1">edit() <a class="header-anchor" href="#edit" aria-label="Permalink to &quot;edit()&quot;">​</a></h3><blockquote><p><strong>edit</strong>(...<code>messages</code>): <code>void</code></p></blockquote><p>Defined in: EditableLog.ts:79</p><p>Edits the current log with new messages.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="messages-2" tabindex="-1">messages <a class="header-anchor" href="#messages-2" aria-label="Permalink to &quot;messages&quot;">​</a></h5><p>...<a href="./../type-aliases/AnyMessage.html"><code>AnyMessage</code></a>[]</p><p>The new messages for the log.</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="remove" tabindex="-1">remove() <a class="header-anchor" href="#remove" aria-label="Permalink to &quot;remove()&quot;">​</a></h3><blockquote><p><strong>remove</strong>(): <code>void</code></p></blockquote><p>Defined in: EditableLog.ts:87</p><p>Removes this log entry from its parent console.</p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="removemessage" tabindex="-1">removeMessage() <a class="header-anchor" href="#removemessage" aria-label="Permalink to &quot;removeMessage()&quot;">​</a></h3><blockquote><p><strong>removeMessage</strong>(<code>message</code>): <code>void</code></p></blockquote><p>Defined in: EditableLog.ts:61</p><p>Removes a specific message from this log.</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="message" tabindex="-1">message <a class="header-anchor" href="#message" aria-label="Permalink to &quot;message&quot;">​</a></h5><p>The message or its index to remove.</p><p><code>number</code> | <a href="./EditableMessage.html"><code>EditableMessage</code></a></p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="tostring" tabindex="-1">toString() <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString()&quot;">​</a></h3><blockquote><p><strong>toString</strong>(): <code>string</code></p></blockquote><p>Defined in: EditableLog.ts:109</p><p>Converts this log entry to a string representation.</p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code></p><p>The string representation of the log.</p>',84)]))}const g=a(r,[["render",n]]);export{u as __pageData,g as default};
